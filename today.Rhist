setwd("code")
options(width=120)
#opts_knit$set(root.dir = file.path(getwd(),".."))

#' Libraries
library(RColorBrewer)
set1 <- brewer.pal(8, "Set1")

#' Clinical data
#' -------------
#' Loading
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE)
clinicalData <- clinicalData[order(clinicalData$PDID),]
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na")
?read.table
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = NA)
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = NULL)
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "")
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="")
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="\'")
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="\"")
dim(clinicalData)
colnames(clinicalData)
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="\"")
dim(clinicalData)
colnames(clinicalData)
clinicalData <- clinicalData[order(clinicalData$PDID),]
clinicalData$ERDate <- as.Date(as.character(clinicalData$ERDate), "%d-%b-%y")
clinicalData$CR_date <- as.Date(as.character(clinicalData$CR_date), "%d-%b-%y")
clinicalData$TPL_date <- as.Date(as.character(clinicalData$TPL_date), "%d-%b-%y")
clinicalData$Date_LF <- as.Date(as.character(clinicalData$Date_LF), "%d-%b-%y")
clinicalData$Recurrence_date <- as.Date(as.character(clinicalData$Recurrence_date), "%d-%b-%y")
levels(clinicalData$Study) <- c( "tr98A" ,   "tr98B" ,   "tr0704")
clinicalData$VPA[is.na(clinicalData$VPA)] <- 0
clinicalData$ATRA_arm[is.na(clinicalData$ATRA_arm)] <- 0
colnames(clinicalData) <- gsub('\\.',"",colnames(clinicalData))
levels(clinicalData$Study)
tail(clinicalData)
which(clinicalData$Study=="")
head(clinicalData)
dim(clinicalData)
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="\"")
clinicalData <- clinicalData[order(clinicalData$PDID),]
tail(clinicalData)
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="\"")
clinicalData <- clinicalData[order(clinicalData$PDID),]
clinicalData$ERDate <- as.Date(as.character(clinicalData$ERDate), "%d-%b-%y")
clinicalData$CR_date <- as.Date(as.character(clinicalData$CR_date), "%d-%b-%y")
clinicalData$TPL_date <- as.Date(as.character(clinicalData$TPL_date), "%d-%b-%y")
clinicalData$Date_LF <- as.Date(as.character(clinicalData$Date_LF), "%d-%b-%y")
clinicalData$Recurrence_date <- as.Date(as.character(clinicalData$Recurrence_date), "%d-%b-%y")
levels(clinicalData$Study) <- c( "tr98A" ,   "tr98B" ,   "tr0704")
clinicalData$VPA[is.na(clinicalData$VPA)] <- 0
clinicalData$ATRA_arm[is.na(clinicalData$ATRA_arm)] <- 0
colnames(clinicalData) <- gsub('\\.',"",colnames(clinicalData))
dim(clinicalData)
mutationData = read.table("../data/Ulm1.8_sm_Genetic.txt", sep="\t", header=TRUE)
levels(mutationData$FINAL_CALL)
table(mutationData$FINAL_CALL)
mutationData = read.table("../data/Ulm1.8_sm_Genetic.txt", sep="\t", header=TRUE, strip.white = TRUE)
table(mutationData$FINAL_CALL)
table(mutationData$Result_class)
table(mutationData$Result, mutationData$Result_class)
table(mutationData$Result, mutationData$FINAL_CALL)
mutationTable <- (table(mutationData[mutationData$Result %in% c("ONCOGENIC","POSSIBLE") & mutationData$FINAL_CALL == "OK"  ,c("SAMPLE_NAME","GENE")]) > 0)+0
#' Survival analyses
#' -----------------
library(survival)
all(rownames(mutationTable)==clinicalData$PDID)
survival <- Surv(clinicalData$efs, clinicalData$EFSSTAT)
#
dim(mutationTable)
utationData = read.table("../data/Ulm1.8_sm_Genetic.txt", sep="\t", header=TRUE, strip.white = TRUE)
mutationData$SAMPLE_NAME <- factor(as.character(mutationData$SAMPLE_NAME), levels = levels(clinicalData$PDID)) ## Refactor
mutationTable <- (table(mutationData[mutationData$Result %in% c("ONCOGENIC","POSSIBLE") & mutationData$FINAL_CALL == "OK"  ,c("SAMPLE_NAME","GENE")]) > 0)+0
dim(mutationTable)
dim(clinicalData)
which(duplicated(clinicalData$PDID))
clinicalData$PDID[which(duplicated(clinicalData$PDID))]
which(duplicated(clinicalData))
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="\"")
clinicalData <- clinicalData[order(clinicalData$PDID),]
clinicalData$ERDate <- as.Date(as.character(clinicalData$ERDate), "%d-%b-%y")
clinicalData$CR_date <- as.Date(as.character(clinicalData$CR_date), "%d-%b-%y")
clinicalData$TPL_date <- as.Date(as.character(clinicalData$TPL_date), "%d-%b-%y")
clinicalData$Date_LF <- as.Date(as.character(clinicalData$Date_LF), "%d-%b-%y")
clinicalData$Recurrence_date <- as.Date(as.character(clinicalData$Recurrence_date), "%d-%b-%y")
levels(clinicalData$Study) <- c( "tr98A" ,   "tr98B" ,   "tr0704")
clinicalData$VPA[is.na(clinicalData$VPA)] <- 0
clinicalData$ATRA_arm[is.na(clinicalData$ATRA_arm)] <- 0
colnames(clinicalData) <- gsub('\\.',"",colnames(clinicalData))
dim(clinicalData)
mutationData = read.table("../data/Ulm1.8_sm_Genetic.txt", sep="\t", header=TRUE, strip.white = TRUE)
mutationData$SAMPLE_NAME <- factor(as.character(mutationData$SAMPLE_NAME), levels = levels(clinicalData$PDID)) ## Refactor
mutationTable <- (table(mutationData[mutationData$Result %in% c("ONCOGENIC","POSSIBLE") & mutationData$FINAL_CALL == "OK"  ,c("SAMPLE_NAME","GENE")]) > 0)+0
dim(mutationTable)
all(rownames(mutationTable)==clinicalData$PDID)
survival <- Surv(clinicalData$efs, clinicalData$EFSSTAT)
colnames(clinicalData)
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=clinicalData$Time_Diag_TPL < survival[,1] & !is.na(clinicalData$Time_Diag_TPL)),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD > 0
dataList$Genetics$FLT3_TKD <- clinicalData$TKD > 0
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment)
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment)
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]
trialArms <- MakeInteger(clinicalData$Study)

#' ## Prepating data
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=clinicalData$Time_Diag_TPL < survival[,1] & !is.na(clinicalData$Time_Diag_TPL)),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD > 0
dataList$Genetics$FLT3_TKD <- clinicalData$TKD > 0
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment)
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment)
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
#' #### A few functions
MakeInteractions <- function(X,Y){
	Z <- do.call(cbind, lapply(X, `*`, Y))
	colnames(Z) <- apply(expand.grid(colnames(X), colnames(Y)),1,paste, collapse=":")
	return(Z)
}

MakeInteger <- function(F){
	res <- as.data.frame(lapply(levels(F), `==`, F))
	colnames(res) <- levels(F)
	res + 0
}

trialArms <- MakeInteger(clinicalData$Study)
#' ## Prepating data
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=clinicalData$Time_Diag_TPL < survival[,1] & !is.na(clinicalData$Time_Diag_TPL)),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD > 0
dataList$Genetics$FLT3_TKD <- clinicalData$TKD > 0
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment)
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment)
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=clinicalData$Time_Diag_TPL < survival[,1] & !is.na(clinicalData$Time_Diag_TPL)),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD != "0"
dataList$Genetics$FLT3_TKD <- clinicalData$TKD != "0"
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment)
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment)
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]
sapply(dataList$Cytogenetics, class)
table(dataList$Cytogenetics$X7q)
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="\"")
clinicalData <- clinicalData[order(clinicalData$PDID),]
clinicalData$ERDate <- as.Date(as.character(clinicalData$ERDate), "%d-%b-%y")
clinicalData$CR_date <- as.Date(as.character(clinicalData$CR_date), "%d-%b-%y")
clinicalData$TPL_date <- as.Date(as.character(clinicalData$TPL_date), "%d-%b-%y")
clinicalData$Date_LF <- as.Date(as.character(clinicalData$Date_LF), "%d-%b-%y")
clinicalData$Recurrence_date <- as.Date(as.character(clinicalData$Recurrence_date), "%d-%b-%y")
levels(clinicalData$Study) <- c( "tr98A" ,   "tr98B" ,   "tr0704")
clinicalData$VPA[is.na(clinicalData$VPA)] <- 0
clinicalData$ATRA_arm[is.na(clinicalData$ATRA_arm)] <- 0
colnames(clinicalData) <- gsub('\\.',"",colnames(clinicalData))
dim(clinicalData)

#' Mutation data
#' -------------
mutationData = read.table("../data/Ulm1.8_sm_Genetic.txt", sep="\t", header=TRUE, strip.white = TRUE)
mutationData$SAMPLE_NAME <- factor(as.character(mutationData$SAMPLE_NAME), levels = levels(clinicalData$PDID)) ## Refactor
mutationTable <- (table(mutationData[mutationData$Result %in% c("ONCOGENIC","POSSIBLE") & mutationData$FINAL_CALL == "OK"  ,c("SAMPLE_NAME","GENE")]) > 0)+0
dim(mutationTable)
#' ## Prepating data
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=clinicalData$Time_Diag_TPL < survival[,1] & !is.na(clinicalData$Time_Diag_TPL)),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD != "0"
dataList$Genetics$FLT3_TKD <- clinicalData$TKD != "0"
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment)
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment)
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]

dataFrame <- do.call(cbind,dataList)
dataFrame <- StandardizeMagnitude(dataFrame)

groups <- factor(unlist(sapply(names(dataList), function(x) rep(x, ncol(dataList[[x]])))))
source("~/Git/Projects/CoxHD/CoxHD/R/functions.R")
dataFrame <- StandardizeMagnitude(dataFrame)
source("~/Git/Projects/CoxHD/CoxHD/R/ecoxph.R")
dataFrame <- StandardizeMagnitude(dataFrame)
sapply(dataList$Clinical, class)
levels(clinicalData$BM_Blasts)
#' Loading
clinicalData <- read.table("../data/Ulm1.8_sm_Clinical.txt", sep="\t", header=TRUE, na.strings = "na", comment.char = "", quote="\"")
clinicalData <- clinicalData[order(clinicalData$PDID),]
clinicalData$ERDate <- as.Date(as.character(clinicalData$ERDate), "%d-%b-%y")
clinicalData$CR_date <- as.Date(as.character(clinicalData$CR_date), "%d-%b-%y")
clinicalData$TPL_date <- as.Date(as.character(clinicalData$TPL_date), "%d-%b-%y")
clinicalData$Date_LF <- as.Date(as.character(clinicalData$Date_LF), "%d-%b-%y")
clinicalData$Recurrence_date <- as.Date(as.character(clinicalData$Recurrence_date), "%d-%b-%y")
levels(clinicalData$Study) <- c( "tr98A" ,   "tr98B" ,   "tr0704")
clinicalData$VPA[is.na(clinicalData$VPA)] <- 0
clinicalData$ATRA_arm[is.na(clinicalData$ATRA_arm)] <- 0
colnames(clinicalData) <- gsub('\\.',"",colnames(clinicalData))
dim(clinicalData)

#' Mutation data
#' -------------
mutationData = read.table("../data/Ulm1.8_sm_Genetic.txt", sep="\t", header=TRUE, strip.white = TRUE)
mutationData$SAMPLE_NAME <- factor(as.character(mutationData$SAMPLE_NAME), levels = levels(clinicalData$PDID)) ## Refactor
mutationTable <- (table(mutationData[mutationData$Result %in% c("ONCOGENIC","POSSIBLE") & mutationData$FINAL_CALL == "OK"  ,c("SAMPLE_NAME","GENE")]) > 0)+0
dim(mutationTable)

#' Compute gene-gene interactions
#+ interactions, cache=TRUE
interactions <- sapply(1:ncol(mutationTable), function(i) sapply(1:ncol(mutationTable), function(j) {f<- try(fisher.test(mutationTable[,i], mutationTable[,j]), silent=TRUE); if(class(f)=="try-error") 0 else ifelse(f$estimate>1, -log10(f$p.val),log10(f$p.val))} ))
odds <- sapply(1:ncol(mutationTable), function(i) sapply(1:ncol(mutationTable), function(j) {f<- try(fisher.test(mutationTable[,i] + .5, mutationTable[,j] +.5), silent=TRUE); if(class(f)=="try-error") f=NA else f$estimate} ))
diag(interactions) <- 0
diag(odds) <- 1
colnames(odds) <- rownames(odds) <- colnames(interactions) <- rownames(interactions) <- colnames(mutationTable)
odds[10^-abs(interactions) > 0.05] = 1
odds[odds<1e-3] = 1e-4
odds[odds>1e3] = 1e4
logodds=log10(odds)
#' ## Prepating data
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=clinicalData$Time_Diag_TPL < survival[,1] & !is.na(clinicalData$Time_Diag_TPL)),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD != "0"
dataList$Genetics$FLT3_TKD <- clinicalData$TKD != "0"
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment)
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment)
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]

dataFrame <- do.call(cbind,dataList)
dataFrame <- StandardizeMagnitude(dataFrame)

groups <- factor(unlist(sapply(names(dataList), function(x) rep(x, ncol(dataList[[x]])))))
poorMansImpute <- function(x) {x[is.na(x)] <- mean(x, na.rm=TRUE); return(x)}
dataFrame <- as.data.frame(sapply(dataFrame, poorMansImpute))
mainGroups <- c("Genetics","Treatment","Clinical","Cytogenetics")
mainIdx <- groups %in% mainGroups
whichRFX <- which(colSums(dataFrame)>=8 | mainIdx) # ie, > 0.5%
whichRFX
length(whichRFX)
coxRFXFit <- CoxRFX(dataFrame[,whichRFX], survival, groups=groups[whichRFX], sigma0=0.1)
par(mar=c(5,7,1,1))
boxplot(coxRFXFit$coefficients ~ groups[whichRFX], las=2, border=set1, horizontal=TRUE)
abline(v=0)
names(dataFrame) <- unlist(sapply(dataList, names))
table(groups)
plot(1:9, col=set1, pch=19)
set1 <- brewer.pal(9, "Set1")[-6]
par(mar=c(5,7,1,1))
boxplot(coxRFXFit$coefficients ~ groups[whichRFX], las=2, border=set1, horizontal=TRUE)
abline(v=0)
DensityEstimates(coxRFX )
DensityEstimates(coxRFXFit )
DensityEstimates()
DensityEstimates
plot(DensityEstimates(coxRFXFit )[,1])
plot(NA,NA,xlim=range(coef(coxRFXFit)), ylim=c(0,9))
for(i in 1:8) polygon(seq(-2,2,0.01), DensityEstimates(coxRFXFit, seq(-2,2,0.01))/5+i, col=col1[i])
for(i in 1:8) polygon(seq(-2,2,0.01), DensityEstimates(coxRFXFit, seq(-2,2,0.01))[,i]/5+i, col=col1[i])
DensityEstimates(coxRFXFit, seq(-2,2,0.01))[,i]
??interpolate
for(i in 1:8) polygon(approx(range(coef(coxRFXFit)), 100), DensityEstimates(coxRFXFit, seq(-2,2,0.01))[,i]/5+i, col=col1[i])
approx(range(coef(coxRFXFit)), 100)
approx(range(coef(coxRFXFit)), n=100)
for(i in 1:8) polygon(approx(range(coef(coxRFXFit)), n=100)$y, DensityEstimates(coxRFXFit)[,i]/5+i, col=col1[i])
col1 <- brewer.pal(9, "Set1")[-6]
for(i in 1:8) polygon(approx(range(coef(coxRFXFit)), n=100)$y, DensityEstimates(coxRFXFit)[,i]/5+i, col=col1[i])
DensityEstimates
plot(NA,NA,xlim=range(coef(coxRFXFit)), ylim=c(0,9))
for(i in 1:8) polygon(approx(range(coef(coxRFXFit)), n=100)$y, DensityEstimates(coxRFXFit)[,i]/5+i, col=col1[i], border=NA)
for(i in 1:8) polygon(approx(range(coef(coxRFXFit)), n=100)$y, DensityEstimates(coxRFXFit)[,i]/5+i, col=col1[i], border=col1[i])
par(mar=c(5,7,1,1))
boxplot(coxRFXFit$coefficients ~ groups[whichRFX], las=2, border=col1, horizontal=TRUE)
abline(v=0)
boxplot(coxRFXFit$coefficients ~ groups[whichRFX], las=2, border=col1, horizontal=TRUE, lty=1, pch=16, cex=.66, staplewex=0)
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit)/log(2) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), col=col1[o], horizontal=TRUE, las=2, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit)/log(2) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=2, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
boxplot(coef(coxRFXFit)/log(2) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
levels(grous)
levels(groups)
plot(1:9, col=set1, pch=19)
col1 <- brewer.pal(9, "Set1")[c(1,4,3,5,7,2,8)]
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit)/log(2) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
col1 <- brewer.pal(9, "Set1")[c(1,4,3,5,7,8,2,9)]
boxplot(coef(coxRFXFit)/log(2) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
t <- clinicalData$Time_Diag_TPL
t[is.na(t)] <- Inf
e <- clinicalData$efs
tplIndex <-  t < e
survivalTD <-  Surv(time = rep(0, nrow(clinicalData)), time2=pmin(e, t), event=ifelse(tplIndex, 0, clinicalData$EFSSTAT) )
survivalTD <- rbind(survivalTD, 
		Surv(time=t[which(tplIndex)],
				time2=e[which(tplIndex)], 
				event=clinicalData$EFSSTAT[which(tplIndex)])
)
survivalTD = Surv(survivalTD[,1],survivalTD[,2],survivalTD[,3])
rm(e,t)
tplSplit <- c(1:nrow(clinicalData), which(tplIndex))

#' Data frame
dataFrameTD <- dataFrame[tplSplit,]
dataFrameTD[which(tplIndex), grep("TPL", colnames(dataFrameTD), value=TRUE)] <- 0 ## Set pre-tpl variables to zero 

patientTD <- c(clinicalData$PDID, clinicalData$PDID[which(tplIndex)])

#' Fit TD Cox RFX model
#+ coxRFXFitTD, cache=TRUE
#whichRFXTD <- which(p.adjust(univP,"BH") < 0.1 | groups %in% c("Genetics","Treatment","Clinical","Cytogenetics"))
whichRFXTD <- which(colSums(dataFrame)>=8 | mainIdx)

coxRFXFitTD <- CoxRFX(dataFrameTD[,whichRFXTD], survivalTD, groups[whichRFXTD], sigma0=0.1)

par(mar=c(5,7,1,1))
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)

plot(coef(coxRFXFit), coef(coxRFXFitTD), col=col1[groups[whichRFXTD]]) # Note the sign change for TPL..
abline(0,1)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
partRiskTD <- PartialRisk(coxRFXFitTD)
#varianceComponents <- rowSums(cov(partRiskTD, use="complete"))
varianceComponents <- diag(cov(partRiskTD, use="complete"))
varianceComponents
pie(abs(varianceComponents), col=brewer.pal(8,"Set1"))
title("Risk contributions")

partRiskVar <- PartialRiskVar(coxRFXFitTD)
x=c(varianceComponents, Residual=mean(rowSums(partRiskVar)))
pie(x, col=c(col1, "grey"), labels = paste(names(x), round(x/sum(x),2)))
plot(survfit(survivalTD ~ dataFrameTD$TPL))
length(whichRFX)
length(whichRFXTD)
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
coef(coxRFXFitTD)[groups=="GeneTreat"]
coef(coxRFXFitTD)[groups[whichRFX]=="GeneTreat"]
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=clinicalData$Time_Diag_TPL < survival[,1] & !is.na(clinicalData$Time_Diag_TPL)),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD != "0"
dataList$Genetics$FLT3_TKD <- clinicalData$TKD != "0"
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment[c("TPL","ATRA","VPA")])
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment[c("TPL","ATRA","VPA")])
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]

dataFrame <- do.call(cbind,dataList)
dataFrame <- StandardizeMagnitude(dataFrame)
names(dataFrame) <- unlist(sapply(dataList, names))

groups <- factor(unlist(sapply(names(dataList), function(x) rep(x, ncol(dataList[[x]])))))

## Poor man's imputation
poorMansImpute <- function(x) {x[is.na(x)] <- mean(x, na.rm=TRUE); return(x)}
dataFrame <- as.data.frame(sapply(dataFrame, poorMansImpute))

#' #### Basic KM plot
#+ eval=FALSE, echo=FALSE
col1 <- brewer.pal(9, "Set1")[c(1,4,3,5,7,8,2,9)]
plot(survfit(survival ~ Genetics.TP53 + Treatment.TPL, data=dataFrame), col=rep(col1[1:2],each=2), lty=1:2, mark=16)
mainGroups <- c("Genetics","Treatment","Clinical","Cytogenetics")
mainIdx <- groups %in% mainGroups
whichRFX <- which(colSums(dataFrame)>=8 | mainIdx) # ie, > 0.5%
plot(survfit(survival ~ TP53 + TPL, data=dataFrame), col=rep(col1[1:2],each=2), lty=1:2, mark=16)
plot(survfit(survival ~ TP53 + TPL, data=dataFrame), col=rep(set1[1:2],each=2), lty=1:2, mark=16)
length(whichRFX)
mainGroups <- c("Genetics","Treatment","Clinical","Cytogenetics")
mainIdx <- groups %in% mainGroups
whichRFX <- which(colSums(dataFrame)>=8 | mainIdx) # ie, > 0.5%

## Fit Cox model
coxRFXFit <- CoxRFX(dataFrame[,whichRFX], survival, groups=groups[whichRFX], sigma0=0.1)
#coxRFXFit <- CoxRFX(dataFrame[,whichRFX], survival, groups=groups[whichRFX], sigma0=0.01) ## reassuring that sigma doesn't shrink further
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit)/log(2) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
t <- clinicalData$Time_Diag_TPL
t[is.na(t)] <- Inf
e <- clinicalData$efs
tplIndex <-  t < e
survivalTD <-  Surv(time = rep(0, nrow(clinicalData)), time2=pmin(e, t), event=ifelse(tplIndex, 0, clinicalData$EFSSTAT) )
survivalTD <- rbind(survivalTD, 
		Surv(time=t[which(tplIndex)],
				time2=e[which(tplIndex)], 
				event=clinicalData$EFSSTAT[which(tplIndex)])
)
survivalTD = Surv(survivalTD[,1],survivalTD[,2],survivalTD[,3])
rm(e,t)
tplSplit <- c(1:nrow(clinicalData), which(tplIndex))

#' Data frame
dataFrameTD <- dataFrame[tplSplit,]
dataFrameTD[which(tplIndex), grep("TPL", colnames(dataFrameTD), value=TRUE)] <- 0 ## Set pre-tpl variables to zero 

patientTD <- c(clinicalData$PDID, clinicalData$PDID[which(tplIndex)])

#' Fit TD Cox RFX model
#+ coxRFXFitTD, cache=TRUE
#whichRFXTD <- which(p.adjust(univP,"BH") < 0.1 | groups %in% c("Genetics","Treatment","Clinical","Cytogenetics"))
whichRFXTD <- which(colSums(dataFrame)>=8 | mainIdx)

coxRFXFitTD <- CoxRFX(dataFrameTD[,whichRFXTD], survivalTD, groups[whichRFXTD], sigma0=0.1)

par(mar=c(5,7,1,1))
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
partRiskTD <- PartialRisk(coxRFXFitTD)
#varianceComponents <- rowSums(cov(partRiskTD, use="complete"))
varianceComponents <- diag(cov(partRiskTD, use="complete"))
varianceComponents
pie(abs(varianceComponents), col=brewer.pal(8,"Set1"))
title("Risk contributions")

partRiskVar <- PartialRiskVar(coxRFXFitTD)
x=c(varianceComponents, Residual=mean(rowSums(partRiskVar)))
pie(x, col=c(col1, "grey"), labels = paste(names(x), round(x/sum(x),2)))
barplot(varianceComponents +m, border=NA, col= colTrans(col1), las=2, xaxt="n", ylab="Risk variance component")
barplot(varianceComponents , border=NA, col= colTrans(col1,1), add=TRUE, xaxt="n", yaxt="n")
barplot(pmax(0,varianceComponents-m) , border=NA, col= colTrans(col1,0), add=TRUE, xaxt="n", yaxt="n")
rotatedLabel(.Last.value, rep(0,8), names(varianceComponents), srt=45)
source("~/Projects/sandbox/mg14.R")
barplot(varianceComponents +m, border=NA, col= colTrans(col1), las=2, xaxt="n", ylab="Risk variance component")
barplot(varianceComponents , border=NA, col= colTrans(col1,1), add=TRUE, xaxt="n", yaxt="n")
barplot(pmax(0,varianceComponents-m) , border=NA, col= colTrans(col1,0), add=TRUE, xaxt="n", yaxt="n")
rotatedLabel(.Last.value, rep(0,8), names(varianceComponents), srt=45)
m <- colMeans(partRiskVar)
barplot(varianceComponents +m, border=NA, col= colTrans(col1), las=2, xaxt="n", ylab="Risk variance component")
barplot(varianceComponents , border=NA, col= colTrans(col1,1), add=TRUE, xaxt="n", yaxt="n")
barplot(pmax(0,varianceComponents-m) , border=NA, col= colTrans(col1,0), add=TRUE, xaxt="n", yaxt="n")
rotatedLabel(.Last.value, rep(0,8), names(varianceComponents), srt=45)
o <- order(varianceComponents)
stars(matrix(varianceComponents[o], nrow=1) +m, draw.segments=TRUE, col.segments=colTrans(col1)[o], scale=FALSE, col.lines=0, lty=0, labels="")
stars(matrix(varianceComponents[o], nrow=1) , draw.segments=TRUE, col.segments=colTrans(col1,1)[o], scale=FALSE, col.lines=0, lty=0, labels="", add=TRUE)
stars(matrix(pmax(0,varianceComponents[o] -m), nrow=1), draw.segments=TRUE, col.segments=col1[o], scale=FALSE, col.lines=0, lty=0, labels="", add=TRUE)
library(HilbertVis)
nStars <- 32
locations <- 1.5*hilbertCurve(log2(nStars)) #2*expand.grid(1:nStars,1:nStars)
s <- sample(nrow(partRiskTD),nStars^2) #1:(nStars^2)
h <- hclust(dist(partRiskTD[s,]))
#stars(exp((partRisk[s,][h$order,] - rep(colMeans(partRisk), each=nStars^2)))/2, scale=FALSE, locations=locations, key.loc=c(0,-3), col.lines=rep(1,(nStars^2)), col.stars = brewer.pal(11,'RdBu')[cut(survivalTD[s,2][h$order], quantile(survivalTD[,2], seq(0,1,0.1), na.rm=TRUE))])
x <- partRiskTD - rep(colMeans(partRiskTD), each=nrow(partRiskTD))
x <- x/(2*sd(x)) + 1 
#x <- exp(x)
stars(x[s,][h$order,]/2, scale=FALSE, locations=locations, key.loc=c(0,-3), col.lines=rep(1,(nStars^2)), col.stars = (brewer.pal(11,'RdBu'))[cut(survivalTD[s,2][h$order], quantile(survivalTD[,2], seq(0,1,0.1), na.rm=TRUE))])
symbols(locations[,1], locations[,2], circles=rep(.5,(nStars^2)), inches=FALSE, fg="grey", add=TRUE, lty=1)
totalRiskTD <- rowSums(partRiskTD)
survConcordance( survivalTD~totalRiskTD)
predictiveRiskTD <- rowSums(partRiskTD[,-which(colnames(partRiskTD) %in% c("Treatment","GeneTreat","CytoTreat"))])
survConcordance( survivalTD~predictiveRiskTD)
library(survAUC)
s <- survival
plot(AUC.uno(s[!is.na(s)],s[!is.na(s)], predictiveRiskTD[!is.na(s)], seq(0,5000,100)))
plot(AUC.uno(s[!is.na(s)],s[!is.na(s)], totalRiskTD[!is.na(s)], seq(0,5000,100)), add=TRUE, col="black")
legend("bottomright",c("w/o treatment","w treatment"), col=2:1, lty=1)
predictiveRiskGroups <-  cut(predictiveRiskTD[!is.na(predictiveRiskTD)], quantile(predictiveRiskTD, seq(0,1,0.25)), labels = c("very low","low","high","very high"))
survConcordance( survivalTD~as.numeric(predictiveRiskGroups))
plot(survfit(survivalTD[!is.na(predictiveRiskTD)] ~ predictiveRiskGroups), col=brewer.pal(4,"Spectral")[4:1], mark=16)
table(clinicalData$M_Risk, predictiveRiskGroups[1:nrow(clinicalData)])[c(2,3,4,1),]
par(mfrow=c(4,1))
for(l in levels(clinicalData$M_Risk)[c(2,3,4,1)]) barplot(sapply(split(as.data.frame(partRiskTD[1:nrow(clinicalData),][clinicalData$M_Risk ==l,]), predictiveRiskGroups[1:nrow(clinicalData)][clinicalData$M_Risk ==l] ), colMeans), beside=TRUE, legend=TRUE, col=col1[1:8], main=l, xlim=c(1,45))
c <- PartialC(coxRFXFitTD)
b <- barplot(c[1,], col=col1, las=2)
segments(b, c[1,]-c[2,], b, c[1,]+c[2,])
abline(h=.5)
set.seed(42)
trainIdx <- sample(c(TRUE,FALSE), nrow(dataFrame), replace=TRUE, prob=c(0.66,0.34))
trainIdxTD <- trainIdx[tplSplit]

#' Pre-select based on univariate test
#+ warning=FALSE
p <- sapply(dataFrame, function(x){summary(coxph(survivalTD[trainIdxTD]~x[trainIdxTD]))$logtest[3]})
whichTrain <- whichRFXTD# which(p.adjust(p,"BH") < 0.1 | groups %in% c("Genetics","Treatment","Clinical","Cytogenetics"))

#' Fit Cox model
#+ coxRFXFitTDTrain, cache=TRUE
coxRFXFitTDTrain <- CoxRFX(dataFrameTD[trainIdxTD,whichTrain], survivalTD[trainIdxTD], groups=groups[whichTrain], sigma0 = 0.1)
coxRFXFitTDTrain <- CoxRFX(dataFrameTD[trainIdxTD,whichTrain], survivalTD[trainIdxTD], groups=groups[whichTrain], sigma0 = 0.1)

#' Partial contributions
partialRiskTest <- PartialRisk(coxRFXFitTDTrain, newX=dataFrameTD[!trainIdxTD, whichTrain])
c <- PartialC(coxRFXFitTDTrain, newX = dataFrameTD[!trainIdxTD, whichTrain], newSurv = survivalTD[!trainIdxTD])
b <- barplot(c[1,], col=col1, las=2)
segments(b, c[1,]-c[2,], b, c[1,]+c[2,])
abline(h=.5)
totalRiskTest <- rowSums(partialRiskTest)
survConcordance(survivalTD[!trainIdxTD]~totalRiskTest )
predictiveRiskTest <- rowSums(partialRiskTest[,-which(colnames(partRiskTD) %in% c("Treatment","GeneTreat","CytoTreat"))])
survConcordance(survivalTD[!trainIdxTD] ~ predictiveRiskTest)
library(rpart)
tree <- rpart(survival ~ ., data=dataFrame)
plot(tree)
text(tree)
survConcordance(na.omit(survival)~predict(tree))
#+ rForest
rForest <- rfsrc(Surv(time, status) ~.,data= cbind(time = survival[,1], status = survival[,2], dataFrame[,mainIdx]))
boxplot(rForest$importance ~ factor(as.character(groups[mainIdx])), border= col1, staplewex=0, pch=16, cex=0.75, ylab="RSF importance", lty=1, xaxt="n")
library(randomForestSRC)
rForest <- rfsrc(Surv(time, status) ~.,data= cbind(time = survival[,1], status = survival[,2], dataFrame[,mainIdx]))
boxplot(rForest$importance ~ factor(as.character(groups[mainIdx])), border= col1, staplewex=0, pch=16, cex=0.75, ylab="RSF importance", lty=1, xaxt="n")
par(mfrow=c(1,1))
plot(tree)
text(tree)
survConcordance(na.omit(survival)~predict(tree))
plot(survfit(survivalTD ~ dataFrameTD$TPL))
survival[clinicalData$Time_Diag_TPL < clinicalData$efs,1] <- clinicalData$efs - clinicalData$Time_Diag_TPL
survival <- Surv(clinicalData$efs, clinicalData$EFSSTAT)
tplIdx <- clinicalData$Time_Diag_TPL < clinicalData$efs & !is.na(clinicalData$Time_Diag_TPL)
survival[tplIdx,1] <- (clinicalData$efs - clinicalData$Time_Diag_TPL)[tplIdx]
clinicalData$Time_Diag_TPL < clinicalData$efs & !is.na(clinicalData$Time_Diag_TPL)
any(is.na(tplIdx))
whicg(is.na(tplIdx))
which(is.na(tplIdx))
which(tplIdx)
survival[which(tplIdx),1] <- (clinicalData$efs - clinicalData$Time_Diag_TPL)[which(tplIdx)]
lines(survfit(survival ~ dataFrame$TPL), lty=2)
plot(survfit(survivalTD ~ dataFrameTD$TPL))
lines(survfit(survival ~ dataFrame$TPL), col=2, conf.int=TRUE)
grep("TPL", colnames(dataFrameTD), value=TRUE)
colSums(dataFrame[grep("TPL", colnames(dataFrameTD), value=TRUE)])
colSums(dataFrameTD[grep("TPL", colnames(dataFrameTD), value=TRUE)])
plot(colSums(dataFrame[grep("TPL", colnames(dataFrameTD), value=TRUE)]),colSums(dataFrameTD[grep("TPL", colnames(dataFrameTD), value=TRUE)]))
coxRFXFitTD <- CoxRFX(dataFrameTD[,whichRFXTD], survivalTD, groups[whichRFXTD], sigma0=0.1, nu=0)

par(mar=c(5,7,1,1))
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
partRiskTD <- PartialRisk(coxRFXFitTD)
#varianceComponents <- rowSums(cov(partRiskTD, use="complete"))
varianceComponents <- diag(cov(partRiskTD, use="complete"))
varianceComponents
pie(abs(varianceComponents), col=brewer.pal(8,"Set1"))
title("Risk contributions")

partRiskVar <- PartialRiskVar(coxRFXFitTD)
x=c(varianceComponents, Residual=mean(rowSums(partRiskVar)))
pie(x, col=c(col1, "grey"), labels = paste(names(x), round(x/sum(x),2)))
c <- coef(coxRFXFitTD)[groups[whichRFX] == "GeneTreat"]
boxplot(c ~ grep("TPL",names(c)))
boxplot(c ~ grepl("TPL",names(c)))
boxplot(c ~ grepl("TPL",names(c)) + grepl("VPA",names(c)))
boxplot(c ~ grepl("TPL",names(c)) + 2*grepl("VPA",names(c)))
boxplot(c ~ (grepl("TPL",names(c)) + 2*grepl("VPA",names(c))))
f <- factor(grepl("TPL",names(c)) + 2*grepl("VPA",names(c))) + 3*grepl("ATRA", names(c)))
f <- factor(grepl("TPL",names(c)) + 2*grepl("VPA",names(c))) + 3*grepl("ATRA", names(c))))
f <- factor(grepl("TPL",names(c)) + 2*grepl("VPA",names(c)) + 3*grepl("ATRA", names(c))))
f <- factor(grepl("TPL",names(c)) + 2*grepl("VPA",names(c)) + 3*grepl("ATRA", names(c)))
f
boxplot(c ~ f)
f <- factor(grepl("TPL",names(c)) + 2*grepl("VPA",names(c)) + 3*grepl("ATRA", names(c)), labels=c("TPL","VPA","ATRA"))
boxplot(c ~ f)
summary(coxRFXFitTD)
pdf("coef.pdf",14,5,pointsize=8)
for(g in levels(groups)){
	par(mar=c(7,4,2,0))
	x <- sort(coxRFXFitTD$coefficients[groups[whichRFXTD]==g])
	v <- diag(coxRFXFitTD$var)[groups[whichRFXTD]==g][ order(coxRFXFitTD$coefficients[groups[whichRFXTD]==g])]
	plot(x, las=2, pch=16, xaxt="n", main=g, cex = .5+pmin(3,-log10(pchisq((x-coxRFXFitTD$mu[g])^2/v, 1, lower.tail=FALSE))))
	segments(1:length(x),x - 2*sqrt(v) ,1:length(x), x+2*sqrt(v))
	axis(side=1, at = 1:length(x), labels = names(x), las=2, cex.axis=.6)
	abline(v=1:length(x), lty=3, col="grey")
	abline(h=coxRFXFitTD$mu[g])
	abline(h = coxRFXFitTD$mu[g] + c(-1,1)*sqrt(coxRFXFitTD$sigma2[g]), lty=2)
}
dev.off()
plot(survfit(survivalTD ~ TPL + CEBPA, data=dataFrameTD))
coxph(survivalTD ~ TPL + CEBPA, data=dataFrameTD)
coxph(survivalTD ~ TPL + CEBPA + TPL:CEBPA, data=dataFrameTD)
coxph(survivalTD ~ ., data=dataFrameTD[groups=="Treatment"])
cov(partRiskTD)
round(cov(partRiskTD)*100)
coxph(survivalTD ~ ., data=dataFrameTD[whichRFX][groups[whichRFX] %in% c("Treatment","Genetics","GeneTreat")])
summary(dataList$Treatment)
c <- coxph(survival ~ ., data=dataFrame[whichRFX][groups[whichRFX] %in% c("Treatment","Genetics","GeneTreat")])
d <- coxph(survivalTD ~ ., data=dataFrameTD[whichRFX][groups[whichRFX] %in% c("Treatment","Genetics","GeneTreat")])
plot(c$coefficients, d$coefficients)
colSums(dataList$Genetics)
colSums(dataList$Genetics, na.rm=TRUE)
sum(colSums(dataList$Genetics, na.rm=TRUE)>7)
c <- CoxRFX(dataFrame[whichRFX][groups[whichRFX] %in% c("Treatment","Genetics","GeneTreat")], survival)
d <- CoxRFX(dataFrameTD[whichRFX][groups[whichRFX] %in% c("Treatment","Genetics","GeneTreat")], survivalTD)
plot(c$coefficients, d$coefficients)
text(c$coefficients, d$coefficients, names(c$coefficients))
plot(survival ~ TPL, data=dataFrame)
plot(survfit(survival ~ TPL, data=dataFrame))
survivalTD[1,]
s <- Surv(survivalTD[,2]-survivalTD[,1], survivalTD[,3]==1)
plot(survfit(s ~ TPL,data=dataFrameTD))
lines(survfit(survivalTD ~ TPL,data=dataFrameTD), col=set1[1])
e <- CoxRFX(dataFrameTD[whichRFX][groups[whichRFX] %in% c("Treatment","Genetics","GeneTreat")], s)
text(r$coefficients, d$coefficients, names(c$coefficients))
plot(e$coefficients, d$coefficients)
text(e$coefficients, d$coefficients, names(c$coefficients))
plot(e$coefficients, d$coefficients)
abline(0,1)
plot(survfit(s ~ TPL,data=dataFrameTD))
lines(survfit(survivalTD ~ TPL,data=dataFrameTD), col=set1[1])
plot(survfit(s ~ TPL,data=dataFrameTD), col=set1[2], conf.int=TRUE)
lines(survfit(survivalTD ~ TPL,data=dataFrameTD), col=set1[1], c=T)
lines(survfit(survivalTD ~ TPL,data=dataFrameTD), col=set1[1], conf.int=T)
coxph(s ~ TPL, data=dataFrameTD)
coxph(survivalTD ~ TPL, data=dataFrameTD)
table(dataFrame$TPL, dataFrame$TP53)
89/1155
11/320
table(dataFrame$TPL, dataFrame$NPM1)
table(dataFrame$TPL, dataFrame$FLT3_ITD)
table(dataFrame$TPL, dataFrame$FLT3_TKD)
which(dataList$Treatment$TPL == NA)
which(is.na(dataList$Treatment$TPL))
clinicalData[170,1:20]
clinicalData[170,1:30]
clinicalData[170,1:33]
clinicalData$Recurrence_date - clinicalData$ERDate
plot(clinicalData$Recurrence_date - clinicalData$ERDate, clinicalData$efs)
abline(0,1)
plot(pmin(clinicalData$Recurrence_date, clinicalData$Date_LF) - clinicalData$ERDate, clinicalData$efs)
table(clinicalData$ereignart)
clinicalData[170,1:33]
1+2+3
59158.64/12
32828.75/12
42931.70/12
tplIdx <- clinicalData$Time_Diag_TPL < clinicalData$efs & !is.na(clinicalData$Time_Diag_TPL)
any(is.na(tplIdx))
which(is.na(tplIdx))
table(clinicalData$TPL_Phase)
table(clinicalData$TPL_Phase, clinicalData$EFSSTAT)
sum(is.na(clinicalData$EFSSTAT))
table(clinicalData$EFSSTAT)
table(clinicalData$TPL_Phase, clinicalData$ereignart)
diff(clinicalData$Recurrence_date - clinicalData$ERDate, clinicalData$efs)
clinicalData$Recurrence_date - clinicalData$ERDate - clinicalData$efs
1137 / 3
pmin(clinicalData$Recurrence_date, clinicalData$Date_LF) - clinicalData$ERDate - clinicalData$efs
pmin(clinicalData$Recurrence_date, clinicalData$Date_LF) - clinicalData$ERDate - clinicalData$rfs
table(dataFrameTD$TPL, dataFrameTD$`CEBPA:TPL`)
coxRFXFitTD$df
table(groups[whichRFX])
coxRFXFitTD$sigma2
table(dataFrameTD$TPL, dataFrameTD$`NF1:TPL`)
plot(survfit(s ~ NF1 + TPL), col=set1[1:4])
plot(survfit(s ~ NF1 + TPL, data=dataFrameTD), col=set1[1:4])
table(dataFrame$TPL, dataFrame$`NF1:TPL`)
table(dataFrame$TPL, dataFrame$`NF1:TPL`, is.na(survival))
plot(survfit(s ~ NF1 + TPL, data=dataFrameTD), col=set1[1:4], conf.int=TRUE)
plot(survfit(s ~ SH2B3 + VPA, data=dataFrameTD), col=set1[1:4], conf.int=TRUE)
plot(survfit(s ~ SH2B3 + VPA, data=dataFrameTD), col=set1[1:4])
table(dataFrame$SH2B3, dataFrame$VPA)
dataFrame$`SH2B3:VPA`
sum(dataFrame$`SH2B3:VPA`)
table(dataFrame$SH2B3, dataFrame$VPA)
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=tplIdx),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD != "0"
dataList$Genetics$FLT3_TKD <- clinicalData$TKD != "0"
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment[c("TPL","ATRA","VPA")])
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment[c("TPL","ATRA","VPA")])
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]

dataFrame <- do.call(cbind,dataList)
dataFrame <- StandardizeMagnitude(dataFrame)
names(dataFrame) <- unlist(sapply(dataList, names))

groups <- factor(unlist(sapply(names(dataList), function(x) rep(x, ncol(dataList[[x]])))))
table(dataFrame$SH2B3, dataFrame$VPA)
table(dataFrame$SH2B3, dataFrame$VPA, dataFrame$`SH2B3:VPA`)
unlist(sapply(dataList, names))
table(dataFrame$VPA, dataFrame$`SH2B3:VPA`)
MakeInteractions <- function(X,Y){
	Z <- do.call(cbind, lapply(X, `*`, Y))
	colnames(Z) <- apply(expand.grid(colnames(Y), colnames(X)),1,paste, collapse=":")
	return(Z)
}
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=tplIdx),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD != "0"
dataList$Genetics$FLT3_TKD <- clinicalData$TKD != "0"
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment[c("TPL","ATRA","VPA")])
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment[c("TPL","ATRA","VPA")])
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]

dataFrame <- do.call(cbind,dataList)
dataFrame <- StandardizeMagnitude(dataFrame)
names(dataFrame) <- unlist(sapply(dataList, names))
table(dataFrame$VPA, dataFrame$`SH2B3:VPA`)
table(dataFrame$VPA, dataFrame$`VPA:SFRS2``)
)
`
table(dataFrame$VPA, dataFrame$`VPA:SFRS2`)
groups <- factor(unlist(sapply(names(dataList), function(x) rep(x, ncol(dataList[[x]])))))
tplIdx <- (clinicalData$Time_Diag_TPL < clinicalData$efs & !is.na(clinicalData$Time_Diag_TPL) | (is.na(clinicalData$efs & !is.na(clinicalData$Time_Diag_TPL)))
)
tplIdx <- (clinicalData$Time_Diag_TPL < clinicalData$efs & !is.na(clinicalData$Time_Diag_TPL)) | (is.na(clinicalData$efs & !is.na(clinicalData$Time_Diag_TPL)))
#' ## Prepating data
dataList <-list(Genetics = data.frame(mutationTable[,colSums(mutationTable)>0]),
		Cytogenetics = clinicalData[,c(47:53,55:71)],
		Treatment = cbind(trialArms[,2:3], ATRA = clinicalData$ATRA_arm, VPA=clinicalData$VPA, TPL=tplIdx),
		Clinical = cbind(clinicalData[, c("AOD","gender","Performance_ECOG","BM_Blasts","PB_Blasts","wbc","LDH_","HB","platelet","Splenomegaly")], MakeInteger(clinicalData$TypeAML)[,-1]))#,
		#MolRisk = makeInteger(clinicalData$M_Risk))
dataList$Genetics$CEBPA <-  clinicalData$CEBPA # encoded as 0,1,2
dataList$Genetics$FLT3 <- NULL
dataList$Genetics$FLT3_ITD <- clinicalData$ITD != "0"
dataList$Genetics$FLT3_TKD <- clinicalData$TKD != "0"
dataList$Genetics$IDH2_p172 <- clinicalData$IDH2 == "172"
dataList$Genetics$NPM1 <- clinicalData$NPM1
dataList$Genetics$MLL_PTD <- clinicalData$MLL_PTD
dataList$Cytogenetics$MLL_PTD <- NULL
dataList$Genetics = dataList$Genetics + 0
dataList$GeneGene <- MakeInteractions(data.frame(dataList$Genetics), data.frame(dataList$Genetics))[,as.vector(upper.tri(matrix(0,ncol=ncol(dataList$Genetics), nrow=ncol(dataList$Genetics))))]
dataList$GeneGene <- dataList$GeneGene[,colSums(dataList$GeneGene, na.rm=TRUE)>0] 
dataList$GeneCyto <- MakeInteractions(dataList$Genetics, dataList$Cytogenetics)
dataList$GeneCyto <- dataList$GeneCyto[,colSums(dataList$GeneCyto, na.rm=TRUE) > 0]
dataList$GeneTreat <- MakeInteractions(dataList$Genetics, dataList$Treatment[c("TPL","ATRA","VPA")])
dataList$GeneTreat <- dataList$GeneTreat[,colSums(dataList$GeneTreat, na.rm=TRUE) > 0]
dataList$CytoTreat <- MakeInteractions(dataList$Cytogenetics, dataList$Treatment[c("TPL","ATRA","VPA")])
dataList$CytoTreat <- dataList$CytoTreat[,colSums(dataList$CytoTreat, na.rm=TRUE) > 0]

dataFrame <- do.call(cbind,dataList)
dataFrame <- StandardizeMagnitude(dataFrame)
names(dataFrame) <- unlist(sapply(dataList, names))

groups <- factor(unlist(sapply(names(dataList), function(x) rep(x, ncol(dataList[[x]])))))

## Poor man's imputation
poorMansImpute <- function(x) {x[is.na(x)] <- mean(x, na.rm=TRUE); return(x)}
dataFrame <- as.data.frame(sapply(dataFrame, poorMansImpute))
survivalTD <-  Surv(time = rep(0, nrow(clinicalData)), time2=pmin(e, t), event=ifelse(tplIndex, 0, clinicalData$EFSSTAT) )
survivalTD <- rbind(survivalTD, 
		Surv(time=t[which(tplIndex)],
				time2=e[which(tplIndex)], 
				event=clinicalData$EFSSTAT[which(tplIndex)])
)
survivalTD = Surv(survivalTD[,1],survivalTD[,2],survivalTD[,3])
rm(e,t)
tplSplit <- c(1:nrow(clinicalData), which(tplIndex))

#' Data frame
dataFrameTD <- dataFrame[tplSplit,]
dataFrameTD[which(tplIndex), grep("TPL", colnames(dataFrameTD), value=TRUE)] <- 0 ## Set pre-tpl variables to zero 

patientTD <- c(clinicalData$PDID, clinicalData$PDID[which(tplIndex)])

#' Fit TD Cox RFX model
#+ coxRFXFitTD, cache=TRUE
#whichRFXTD <- which(p.adjust(univP,"BH") < 0.1 | groups %in% c("Genetics","Treatment","Clinical","Cytogenetics"))
whichRFXTD <- which(colSums(dataFrame)>=8 | mainIdx)

coxRFXFitTD <- CoxRFX(dataFrameTD[,whichRFXTD], survivalTD, groups[whichRFXTD], sigma0=0.1, nu=0)

par(mar=c(5,7,1,1))
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
t <- clinicalData$Time_Diag_TPL
t[is.na(t)] <- Inf
#e <- clinicalData$efs
#tplIndex <-  t < e
survivalTD <-  Surv(time = rep(0, nrow(clinicalData)), time2=pmin(e, t), event=ifelse(tplIndex, 0, clinicalData$EFSSTAT) )
survivalTD <- rbind(survivalTD, 
		Surv(time=t[which(tplIndex)],
				time2=e[which(tplIndex)], 
				event=clinicalData$EFSSTAT[which(tplIndex)])
)
survivalTD = Surv(survivalTD[,1],survivalTD[,2],survivalTD[,3])
rm(e,t)
tplSplit <- c(1:nrow(clinicalData), which(tplIndex))

#' Data frame
dataFrameTD <- dataFrame[tplSplit,]
dataFrameTD[which(tplIndex), grep("TPL", colnames(dataFrameTD), value=TRUE)] <- 0 ## Set pre-tpl variables to zero 

patientTD <- c(clinicalData$PDID, clinicalData$PDID[which(tplIndex)])

#' Fit TD Cox RFX model
#+ coxRFXFitTD, cache=TRUE
#whichRFXTD <- which(p.adjust(univP,"BH") < 0.1 | groups %in% c("Genetics","Treatment","Clinical","Cytogenetics"))
whichRFXTD <- which(colSums(dataFrame)>=8 | mainIdx)

coxRFXFitTD <- CoxRFX(dataFrameTD[,whichRFXTD], survivalTD, groups[whichRFXTD], sigma0=0.1, nu=0)
par(mar=c(5,7,1,1))
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
plot(coef(coxRFXFit), coef(coxRFXFitTD), col=col1[groups[whichRFXTD]]) # Note the sign change for TPL..
abline(0,1)
partRiskTD <- PartialRisk(coxRFXFitTD)
#varianceComponents <- rowSums(cov(partRiskTD, use="complete"))
varianceComponents <- diag(cov(partRiskTD, use="complete"))
varianceComponents
pie(abs(varianceComponents), col=brewer.pal(8,"Set1"))
title("Risk contributions")

partRiskVar <- PartialRiskVar(coxRFXFitTD)
x=c(varianceComponents, Residual=mean(rowSums(partRiskVar)))
pie(x, col=c(col1, "grey"), labels = paste(names(x), round(x/sum(x),2)))
m <- colMeans(partRiskVar)
barplot(varianceComponents +m, border=NA, col= colTrans(col1), las=2, xaxt="n", ylab="Risk variance component")
barplot(varianceComponents , border=NA, col= colTrans(col1,1), add=TRUE, xaxt="n", yaxt="n")
barplot(pmax(0,varianceComponents-m) , border=NA, col= colTrans(col1,0), add=TRUE, xaxt="n", yaxt="n")
rotatedLabel(.Last.value, rep(0,8), names(varianceComponents), srt=45)
10^-(7 x .5^2/100)
10^-(7 * .5^2/100)
10^-(10 * .5^2/100)
10^-(20 * .5^2/100)
10^-(100 * .5^2/100)
partRiskTD <- PartialRisk(coxRFXFitTD)
#varianceComponents <- rowSums(cov(partRiskTD, use="complete"))
varianceComponents <- diag(cov(partRiskTD, use="complete"))
varianceComponents
pie(abs(varianceComponents), col=brewer.pal(8,"Set1"))
title("Risk contributions")

partRiskVar <- PartialRiskVar(coxRFXFitTD)
x=c(varianceComponents, Residual=mean(rowSums(partRiskVar)))
pie(x, col=c(col1, "grey"), labels = paste(names(x), round(x/sum(x),2)))
rowSums(cov(partRisk))
rowSums(cov(partRiskTD))
predict(c)
?predict.coxph
predict(c, se.fit)
predict(c, se.fit=TRUE)
se <- sqrt(rowSums(as.matrix(c$X) %*% c$coefficients * c$X)))
se <- sqrt(rowSums(as.matrix(c$X) %*% c$coefficients * c$X))
se <- sqrt(rowSums(as.matrix(c$X) %*% c$coefficients * as.matrix(c$X)))
se <- sqrt(rowSums(as.matrix(c$X) %*% c$var * as.matrix(c$X)))
predict(c, se.fit=TRUE)
plot(predict(c, se.fit=TRUE)$se.fit, se)
plot(predict(c, se.fit=TRUE)$se.fit, se[!is.na(c$surv)])
se <- sqrt(rowSums(as.matrix(c$X - rep(colMeans(c$X), ncol(c$X))) %*% c$var * as.matrix(c$X)))
se <- sqrt(rowSums(as.matrix(c$X - rep(colMeans(c$X), each=nrow(c$X))) %*% c$var * as.matrix(c$X)))
se <- sqrt(rowSums(as.matrix(c$X - rep(colMeans(c$X, na.rm=TRUE), each=nrow(c$X))) %*% c$var * as.matrix(c$X)))
se <- sqrt(rowSums(as.matrix(c$X - rep(colMeans(c$X, na.rm=TRUE), each=nrow(c$X))) %*% c$var * as.matrix(c$X- rep(colMeans(c$X, na.rm=TRUE), each=nrow(c$X)))))
plot(predict(c, se.fit=TRUE)$se.fit, se[!is.na(c$surv)])
MoscowPlot <- function(x, sd, col=1:length(x), at = seq_along(x), width = 0.8, ...){
	y <- seq(0,max(x + 3*sd), l=100)
	plot(NA,NA, xlim=c(0,length(x)+1), ylim=range(y), xaxt="n", ...)
	for(i in seq_along(x)){
		xx <- w/2 * pnorm(y, x[i], sd[i])
		polygon(i +c(xx, -rev(xx)), c(y, rev(y)) , col=col[i])
	}
}
MoscowPlot(varianceComponents)
MoscowPlot(varianceComponents, colMeans(partRiskVar))
MoscowPlot <- function(x, sd, col=1:length(x), at = seq_along(x), width = 0.8, ...){
	y <- seq(0,max(x + 3*sd), l=100)
	plot(NA,NA, xlim=c(0,length(x)+1), ylim=range(y), xaxt="n", ...)
	for(i in seq_along(x)){
		xx <- width/2 * pnorm(y, x[i], sd[i])
		polygon(i +c(xx, -rev(xx)), c(y, rev(y)) , col=col[i])
	}
}
MoscowPlot(varianceComponents, colMeans(partRiskVar))
MoscowPlot <- function(x, sd, col=1:length(x), at = seq_along(x), width = 0.8, ...){
	y <- seq(0,max(x + 3*sd), l=100)
	plot(NA,NA, xlim=c(0,length(x)+1), ylim=range(y), xaxt="n", ...)
	for(i in seq_along(x)){
		xx <- width/2 * pnorm(y, x[i], sd[i], lower.tail=TRUE)
		polygon(i +c(xx, -rev(xx)), c(y, rev(y)) , col=col[i], border=col[i])
	}
}
MoscowPlot(varianceComponents, colMeans(partRiskVar))
MoscowPlot <- function(x, sd, col=1:length(x), at = seq_along(x), width = 0.8, ...){
	y <- seq(0,max(x + 3*sd), l=100)
	plot(NA,NA, xlim=c(0,length(x)+1), ylim=range(y), xaxt="n", ...)
	for(i in seq_along(x)){
		xx <- width/2 * pnorm(y, x[i], sd[i], lower.tail=FALSE)
		polygon(i +c(xx, -rev(xx)), c(y, rev(y)) , col=col[i], border=col[i])
	}
}
MoscowPlot <- function(x, sd, col=1:length(x), at = seq_along(x), width = 0.8, ...){
	y <- seq(0,max(x + 3*sd), l=100)
	plot(NA,NA, xlim=c(0,length(x)+1), ylim=range(y), xaxt="n", ...)
	for(i in seq_along(x)){
		xx <- width/2 * pnorm(y, x[i], sd[i], lower.tail=TRUE)
		polygon(i +c(xx, -rev(xx)), c(y, rev(y)) , col=col[i], border=col[i])
	}
}
MoscowPlot(varianceComponents, colMeans(partRiskVar))
MoscowPlot <- function(x, sd, col=1:length(x), at = seq_along(x), width = 0.8, ...){
	y <- seq(0,max(x + 3*sd), l=100)
	plot(NA,NA, xlim=c(0,length(x)+1), ylim=range(y), xaxt="n", ...)
	for(i in seq_along(x)){
		xx <- width/2 * pnorm(y, x[i], sd[i], lower.tail = TRUE)
		polygon(i +c(-xx, rev(xx)), c(y, rev(y)) , col=col[i], border=col[i])
	}
}
MoscowPlot(varianceComponents, colMeans(partRiskVar))
MoscowPlot <- function(x, sd, col=1:length(x), at = seq_along(x), width = 0.8, ...){
	y <- seq(0,max(x + 3*sd), l=100)
	plot(NA,NA, xlim=c(0,length(x)+1), ylim=range(y), xaxt="n", ...)
	for(i in seq_along(x)){
		xx <- width/2 * pnorm(y, x[i], sd[i], lower.tail = FALSE)
		polygon(i +c(-xx, rev(xx)), c(y, rev(y)) , col=col[i], border=col[i])
	}
}
MoscowPlot(varianceComponents, colMeans(partRiskVar))
MoscowPlot <- function(x, sd, col=1:length(x), at = seq_along(x), width = 0.8, ...){
	y <- seq(0,max(x + 3*sd), l=100)
	plot(NA,NA, xlim=c(0,length(x)+1), ylim=range(y), xaxt="n", ...)
	for(i in seq_along(x)){
		xx <- width/2 * pnorm(y, x[i], sd[i], lower.tail = FALSE)
		polygon(i +c(-xx, rev(xx)), c(y, rev(y)) , col=col[i], border=NA)
	}
}
MoscowPlot(varianceComponents, colMeans(partRiskVar))
source("/Users/mg14/Projects/sandbox/mg14.R", echo=FALSE, encoding="ISO-8859-1")
MoscowPlot(varianceComponents, colMeans(partRiskVar), col=col1)
varianceComponents
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(cox)
tmp <- AnovaLOOCV(coxRFXFit)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFit)
dim(tmp)
tmp[1,]
barplot(tmp)
barplot(tmp, border=NA)
barplot(tmp, border=NA, width=1)
barplot(tmp[,which(mainIdx)], border=NA, width=1)
tmp[,1]
tmp <- AnovaLOOCV(coxRFXFitTD)
tmp[,1]
mean(predict(coxRFXFit, se.fit=TRUE)$se.fit)
partRiskVar <- PartialRiskVar(coxRFXFitTD)
x=c(varianceComponents, Residual=mean(rowSums(partRiskVar)))
pie(x, col=c(col1, "grey"), labels = paste(names(x), round(x/sum(x),2)))
quantile(predict(coxRFXFit, se.fit=TRUE)$se.fit)
partRiskVar <- PartialRiskVar(coxRFXFitTD)
plot(rowSums(partRiskVar), predict(coxRFXFit , se.fit=TRUE)$se.fit)
plot(rowSums(partRiskVar), predict(coxRFXFitTD , se.fit=TRUE)$se.fit)
plot(rowSums(partRiskVar)[!is.na(survialTD)], predict(coxRFXFitTD , se.fit=TRUE)$se.fit)
plot(rowSums(partRiskVar)[!is.na(survivalTD)], predict(coxRFXFitTD , se.fit=TRUE)$se.fit)
?predict
?predict.coxph
predict.coxph
survival:::predict.coxph
coxRFXFitTD$means
plot(coxRFXFitTD$means, rowMeans(coxRFXFitTD$X))
plot(coxRFXFitTD$means, colMeans(coxRFXFitTD$X))
plot(rowSums(PartialRiskVar(coxRFXFitTD))[!is.na(survivalTD)], predict(coxRFXFitTD , se.fit=TRUE)$se.fit)
survival:::predict.coxph
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
plot(rowSums(PartialRiskVar(coxRFXFitTD))[!is.na(survivalTD)], predict(coxRFXFitTD , se.fit=TRUE)$se.fit)
sum(rowSums(PartialRiskVar(coxRFXFitTD))[!is.na(survivalTD)])
mean( predict(coxRFXFitTD , se.fit=TRUE)$se.fit^2)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
plot(rowSums(PartialRiskVar(coxRFXFitTD))[!is.na(survivalTD)], predict(coxRFXFitTD , se.fit=TRUE)$se.fit)
x <- 1
plot( PredictRiskMissing(coxRFXFitTD)[,2], predict(coxRFXFitTD , se.fit=TRUE)$se.fit)
is.na(survivalTD)
plot( PredictRiskMissing(coxRFXFitTD)[!is.na(survivalTD),2], predict(coxRFXFitTD , se.fit=TRUE)$se.fit^2)
barplot(tmp[1:8,which(mainIdx)], border=NA, width=1)
barplot(tmp[8:1,which(mainIdx)], border=NA, width=1)
tmp[,1]
barplot(tmp[8:1,which(mainIdx)], border=NA, width=1, col=col1)
barplot(tmp[1:8,which(mainIdx)], border=NA, width=1, col=col1)
order(colSums(tmp[1:8,which(mainIdx)]))
o <- order(colSums(tmp[1:8,which(mainIdx)]))
names(dataFrame)[o]
barplot(tmp[1:8,which(mainIdx)][,o], border=NA, width=1, col=col1)
do.call("order", as.list(as.data.frame(t(tmp[1:8,which(mainIdx)]))))
o <- do.call("order", as.list(as.data.frame(t(tmp[1:8,which(mainIdx)]))))
barplot(tmp[1:8,which(mainIdx)][,o], border=NA, width=1, col=col1)
r <- PredictRiskMissing(coxRFXFitTD)
mean(r[,2])
p <- PartialRiskVar(coxRFXFitTD)
rowSums(p)
mean(rowSums(p))
mean(r[,2])
colMeans(p)
sum(colMeans(p))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
AnovaRFX(coxRFXFitTD)
pie(AnovaRFX(coxRFXFitTD))
pie(AnovaRFX(coxRFXFitTD), col=col1)
pie(AnovaRFX(coxRFXFitTD), col=c(col1,"Grey")
)
pie(AnovaRFX(coxRFXFitTD), col=c(col1,"White"))
pie(AnovaRFX(coxRFXFitTD), col=c(col1,"White"), border=NA)
pie(sort(AnovaRFX(coxRFXFitTD)), col=c(col1,"White"), border=NA)
a <- AnovaRFX(coxRFXFitTD)
pie(AnovaRFX(coxRFXFitTD)[c(order(a[1:8]),9)], col=c(col1order(a[1:8]),"White"), border=NA)
pie(AnovaRFX(coxRFXFitTD)[c(order(a[1:8]),9)], col=c(col1[order(a[1:8])],"White"), border=NA)
cov(partRiskTD)
rowSums(cov(partRiskTD))
diag(cov(partRiskTD))
barplot(diag(cov(partRiskTD)))
barplot(rowSums(cov(partRiskTD)))
cov(MakeInteger(rep(1:10,each=10))
)
cov(MakeInteger(factor(rep(1:10,each=10))))
cov(MakeInteger(factor(rep(1:10,each=10)))[,-1])
cov(MakeInteger(factor(rep(1:10,each=10))))
(1:10) %*% cov(MakeInteger(factor(rep(1:10,each=10)))) %*% (1:10)
var(1:10)
var(rep(1:10,each=10))
var(2:10)
var(1:10)
tr(cov(MakeInteger(factor(rep(1:10,each=10)))))
trace(cov(MakeInteger(factor(rep(1:10,each=10)))))
diag(cov(MakeInteger(factor(rep(1:10,each=10)))))
sum(diag(cov(MakeInteger(factor(rep(1:10,each=10))))))
sum(diag(cov(MakeInteger(factor(rep(1:10,each=10)))))) * var(1:10)
rowSums(cov(MakeInteger(factor(rep(1:10,each=10))))))
rowSums(cov(MakeInteger(factor(rep(1:10,each=10)))))
(1:10) %*% cov(MakeInteger(factor(rep(1:10,each=10)))) %*% (1:10)
require(knitr)
spin( "/Users/mg14/Git/Projects/CoxHD/test/coxRFXTest.R")
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
dim(tmp)
colnames(tmp)
rownames(tmp)
colnames(coxRFXFitTD$X)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
debug(AnovaLOOCV)
tmp <- AnovaLOOCV(coxRFXFitTD)




names(risk0)
dim(risk0)
class(fit$X)
Q
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
names(coxRFXFitTD$groups)
names(coxRFXFitTD$groups) <- colnames(coxRFXFitTD$X)
tmp <- AnovaLOOCV(coxRFXFitTD)
dim(tmp)
barplot(tmp)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
dim(tmp)
barplot(tmp)
rowMeans(tmp)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
barplot(tmp, col=col1)
barplot(tmp, col=c(col1,"grey"))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
barplot(tmp, col=c(col1,"grey"))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
dim9tmp
dim9tmp
dim(tmp)
barplot(tmp, col=c(col1,"grey"))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
dim(tmp)
tmp <- AnovaLOOCV(coxRFXFitTD)
dim9mp
dim(tmp)
barplot(tmp, col=c(col1,"grey"))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp <- AnovaLOOCV(coxRFXFitTD)
barplot(tmp, col=c(col1,"grey"))
o <- do.call(order, as.list(as.data.frame(t(tmp))))
barplot(tmp[,o], col=c(col1,"grey"))
barplot(tmp[,o], col=c(col1,"grey"), las=2)
varianceComponents
barplot(tmp[,o], col=c(col1,"grey"), las=2, beside=TRUE)
barplot(tmp[,o], col=c(col1,"grey"), las=2, beside=TRUE, border=NA)
sort(tmp["Genetics",])
sort(tmp["GeneGene",])
sort(tmp["Cytogenetics",])
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp2 <- AnovaLOOCV(coxRFXFitTD, which.coef=c("ASXL1"))
tmp2
tmp2 <- AnovaLOOCV(coxRFXFitTD, which.coef=c("ASXL1"), method="complicated")
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp2 <- AnovaLOOCV(coxRFXFitTD, which.coef=c("ASXL1"), method="complicated")
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp2 <- AnovaLOOCV(coxRFXFitTD, which.coef=c("ASXL1"), method="complicated")
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp2 <- AnovaLOOCV(coxRFXFitTD, which.coef=c("ASXL1"), method="complicated")
tmp2
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
tmp2 <- AnovaLOOCV(coxRFXFitTD, which.coef=c("ASXL1"), method="complicated")
tmp2
plot(tmp, tmp2)
tmp
plot(varianceComponents, tmp2)
plot(varianceComponents, tmp2[-9])
abline(0,1)
save(coxRFXFitTD, file="/Volumes/mg14/AML/tmp.RData")
a > NULL
load("../cv.RData")
cv <- as.data.frame(tmp)
dim(tmp)
dim(cv)
cv[1,]
barplot(cv)
range(cv)
class(tmp)
class(cv)
cv$structure.c.0.0519067807929447..0.00516011525752773..0.266331557214305..
colnames(cv)
colnames(cv) <- grep(":", colnames(coxRFXFitTD$X), value=TRUE, invert=TRUE)
barplot(cv)
barplot(as.matrix(cv))
o <- order(colSums(cv[-9,]))
barplot(as.matrix(cv[,o]), col=col1)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"))
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=1)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=2)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=1.2)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=1.2, lwd=NA)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=1.2, lwd=0)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=1.2, lty=NA)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=1.2, lty=0)
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=2)
?barplot
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=2 ,xlim=c(0,ncol(cv)+1))
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, width=1 ,xlim=c(0,ncol(cv)+1))
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, space=0)
1/(exp(0) +1)
1/(exp(-1) 1)
1/(exp(-1) +1)
1/(exp(1) +1)
range(X)
barplot(sort(cv["Genetics",]), col=c(col1,"grey"), las=2, border=NA, space=0)
barplot(sort(cv[,"Genetics"]), col=c(col1,"grey"), las=2, border=NA, space=0)
dim(cv)
str(cv)
barplot(sort(cv[5,]), col=c(col1,"grey"), las=2, border=NA, space=0)
cv[5,]
cv[6,]
cv[3,]
cv[3,]
cv[2,]
cv[5,]
tmp <- as.matrix(cv)
tmp
barplot(sort(tmp["Genetics",]), col=c(col1,"grey"), las=2, border=NA, space=0)
o <- order(tmp["Genetics",]))
o <- order(tmp["Genetics",])
barplot(tmp["Genetics",o]), col=ifelse(groups[o] == "Genetics", col1[1],"grey"), las=2, border=NA, space=0)
barplot(tmp["Genetics",o], col=ifelse(groups[o] == "Genetics", col1[1],"grey"), las=2, border=NA, space=0)
barplot(varianceComponents["Genetics"] - tmp["Genetics",o], col=ifelse(groups[o] == "Genetics", col1[1],"grey"), las=2, border=NA, space=0)
cumsum(varianceComponents["Genetics"] - tmp["Genetics",o])
varianceComponents["Genetics"]
o <- order(tmp["Cytogenetics",])
barplot(varianceComponents["Cytogenetics"] - tmp["Cytogenetics",o], col=ifelse(groups[o] == "Cytogenetics", col1[1],"grey"), las=2, border=NA, space=0)
cumsum(varianceComponents["Cytogenetics"] - tmp["Cytogenetics",o])
varianceComponents["Cytogenetics"]
barplot( tmp["Cytogenetics",o], col=ifelse(groups[o] == "Cytogenetics", col1[1],"grey"), las=2, border=NA, space=0)
rowMeans(tmp)
pie(rowMeans(tmp))
boxplot(t(tmp))
plot(survfit(survivalTD ~ NPM1, data=dataFrameTD))
survfit(survivalTD ~ NPM1, data=dataFrameTD)
survfit(survivalTD ~ NPM1, data=dataFrameTD)
boxplot(t(tmp))
rForest$importance
plot(rForest$importance, colSums(tmp))
plot(rForest$importance, colSums(tmp[-9,]))
plot(rForest$importance, sum(varianceComponents) - colSums(tmp[-9,]))
plot(rForest$importance, sum(varianceComponents) - colSums(tmp[-9,]), log="xy")
plot(rForest$importance, sum(varianceComponents) - colSums(tmp[-9,]))
predict(rForest)
predict(rForest, importance="none")
survConcordance(survival ~ .Last.value$predicted)
p <- .Last.value
p
length(p$predicted)
survConcordance(na.omit(survival) ~ .Last.value$predicted)
survConcordance(na.omit(survival) ~ p$predicted)
f <- rfsrc(survival[trainIdx] ~ ., data=dataFrame[trainIdx, mainIdx], importance="none", ntree=100)
f <- rfsrc(Surv(time, status) ~.,data= cbind(time = survival[,1], status = survival[,2], dataFrame[,mainIdx])[trainIdx,])
f
f <- rfsrc(Surv(time, status) ~.,data= cbind(time = survival[,1], status = survival[,2], dataFrame[,mainIdx])[trainIdx,], ntree=100, importance="none")
f
survConcordance(survival[trainIdx]~ predict(f, importance="none")$prediction)
p <- predict(f, importance="none")
survConcordance(survival[trainIdx]~ p$predicted)
survConcordance(na.omit(survival[trainIdx])~ p$predicted)
p <- predict(f, newdata = dataFrame[testIdx,mainIdx], importance="none")
testIdx
p <- predict(f, newdata = dataFrame[!testIdx,mainIdx], importance="none")
p <- predict(f, newdata = dataFrame[!trainIdx,mainIdx], importance="none")
survConcordance(na.omit(survival[!trainIdx])~ p$predicted)
survConcordance(survival ~ p$predicted)
survConcordance(survival[!trainIdx] ~ p$predicted)
r <- CoxRFX(dataFrame[trainIdx, whichRFX], survival[trainIdx], sigma0=0.1)
survConcordance(survival[!trainIdx] ~ predict(r, newdata=dataFrame[!trainIdx]))
survConcordance(survival[!trainIdx] ~ predict(r, newdata=dataFrame[!trainIdx,]))
survConcordance(na.omit(survival[!trainIdx]) ~ predict(r, newdata=dataFrame[!trainIdx,]))
length(predict(r, newdata=dataFrame[!trainIdx]))
length(predict(r, newdata=dataFrame[!trainIdx,]))
?predict.coxph
length(predict(r))
dum(!trainIdx)
sum(!trainIdx)
survConcordance(na.omit(survival[!trainIdx]) ~  as.matrix(dataFrame[!trainIdx,mainIdx]%*%r$coefficients))
survConcordance(na.omit(survival[!trainIdx]) ~  as.matrix(dataFrame[!trainIdx,mainIdx])%*%r$coefficients)
survConcordance(na.omit(survival[!trainIdx]) ~  as.matrix(dataFrame[!trainIdx,whichRFX])%*%r$coefficients)
survConcordance(survival[!trainIdx] ~  as.matrix(dataFrame[!trainIdx,whichRFX])%*%r$coefficients)
selected
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
stabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/stacoxph.R", echo=FALSE, encoding="ISO-8859-1")
source("/Users/mg14/Git/Projects/AML/code/AML.R", echo=FALSE, encoding="ISO-8859-1")
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/stacoxph.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
stabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
library(glmnet)
stabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
	a_vec <- rep(MAXa,B)
		num / denom - etaB
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/r_concave_tail.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
simStabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
plot(simStabCoxInt)
which(simStabCoxInt$Pi > 0.8)
plot(simStabCoxInt)
colnames(simStabCoxInt$X)
table(simStabCoxInt$X$`R.CEBPA_bi:FLT3_ITD`, simStabCoxInt$X$`CEBPA_bi:FLT3_ITD`)
sort(simStabCoxInt$Pi)
table(simStabCoxInt$X$`R.NPM1:t_15_17`, simStabCoxInt$X$`CEBPA_bi:FLT3_ITD`)
table(simStabCoxInt$X$`R.NPM1:t_15_17`)
plot(survfit(na.omit(survival) ~ simStabCoxInt$X$`R.NPM1:t_15_17`))
simStabCoxInt$penalty.factor
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
simStabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
which(simStabCoxInt$Pi > 0.8)
colnames(simStabCoxInt$X)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/stacoxph.R", echo=FALSE, encoding="ISO-8859-1")
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
simStabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/stacoxph.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
simStabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/stacoxph.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
simStabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
options(error=recover)
simStabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
ls()
M
any(is.na(theta))
which(is.na.theta)
which(is.na(theta))
stabCox$penalty.factor
length(stabCox$penalty.factor)
dim(stabCox$X)
which.error
Q
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
simStabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
12 * 1800
plot(simStabCoxInt)
which(simStabCoxInt$Pi > 0.8)
simStabCoxInt$penalty.factor
simStabCoxInt$which.error
simStabCoxInt$theta
plot(survfit(na.omit(survival)~simStabCoxInt$X$R.TET2))
plot(survfit(na.omit(survival)~simStabCoxInt$X$R.TET2), conf.int=TRUE)
plot(survfit(na.omit(survival)~simStabCoxInt$X$R.CEBPA_mono), conf.int=TRUE)
table(simStabCoxInt$X$R.CEBPA_mono, simStabCoxInt$X$CEBPA_mono)
plot(survfit(na.omit(survival)~simStabCoxInt$X$CEBPA_mono), conf.int=TRUE)
plot(survfit(na.omit(survival)~simStabCoxInt$X$CEBPA_mono), conf.int=TRUE, col=1:3)
plot(survfit(na.omit(survival)~simStabCoxInt$X$CEBPA_bi), conf.int=TRUE, col=1:3)
survfit(survival ~ clinicalData$CEBPA)
tmp <- clinicalData$CEBPA
sum(is.na(CEBPA))
sum(is.na(tmp))
tmp[is.na(tmp)] <- -1
survfit(survival ~ tmp)
plot(survfit(survival ~ tmp))
plot(survfit(survival ~ tmp), col=set1)
plot(survfit(survival ~ tmp), col=set1, conf.int=TRUE)
plot(survfit(survival ~ tmp), col=rep(set1, each=3), conf.int=TRUE)
plot(survfit(survival ~ tmp), col=rep(set1[1:4], each=3), conf.int=TRUE)
plot(survfit(survival ~ tmp), col=rep(set1[1:4], each=4), conf.int=TRUE)
plot(survfit(survival ~ tmp), col=rep(set1[1:4], each=2), conf.int=TRUE)
plot(survfit(survival ~ tmp), col=rep(set1[1:4]), conf.int=TRUE)
plot(simStabCoxInt)
plot(colMeans(simStabCoxInt$Pr), simStabCoxInt$theta)
abline(0,1)
length(simStabCoxInt$which.error)
ncol(simStabCoxInt$X)
plot(colMeans(simStabCoxInt$Pr[simStabCoxInt$penalty.factor > 0,]), simStabCoxInt$theta)
abline(0,1)
2^7
ncol(NULL)
ncol(NULL) + 1
1:NULL
1:numeric(0)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
stabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
set.seed(42)
stabCoxInt <- CoxCPSSInteractions(dataFrame[!is.na(survival),groups %in% mainGroups], na.omit(survival), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
plot(stabCoxInt)
which(stabCoxInt$Pi > 0.8)
stabCoxInt$Pi[which(stabCoxInt$Pi > 0.8)]
stabCoxInt$Pi[which(stabCoxInt$Pi > 0.8)]
sort(stabCoxInt$Pi)
set.seed(42)
simStabCoxInt <- CoxCPSSInteractions(dataFrame[groups %in% mainGroups], simSurvival, bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
simSurvival
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxRFXFit, centered=FALSE), survival, span=.1)
partRisk <- PartialRisk(coxRFXFit)
totalRisk <- rowSums(partRisk)
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxRFXFit, centered=FALSE), survival, span=.1)
options(error=NULL)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxRFXFit, centered=TRUE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
mean(totalRisk)
set.seed(42)
partRisk <- PartialRisk(coxRFXFit)
totalRisk <- rowSums(partRisk)
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxRFXFit, centered=FALSE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
simSurvival <- SimSurvNonp(totalRisk-mean(totalRisk), basehaz(coxRFXFit, centered=FALSE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
survConcordance(simSurvival[trainIdx] ~ totalRisk[trainIdx])
coxRFXFit <- CoxRFX(dataFrame[,whichRFX], survival, groups=groups[whichRFX], sigma0=0.1, nu=0)
par(mar=c(5,7,1,1))
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit)/log(2) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
partRisk <- PartialRisk(coxRFXFit)
totalRisk <- rowSums(partRisk)
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxRFXFit, centered=FALSE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
plot(basehaz(coxRFXFit))
plot(t(basehaz(coxRFXFit)))
b <- basehaz(coxRFXFit)
plot(b$time, b$hazard)
plot(b$time, 1-b$hazard)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
lines(b$time, 1-b$hazard, col="blue")
mean(totalRisk)
simSurvival <- SimSurvNonp(totalRisk+1, basehaz(coxRFXFit, centered=FALSE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
SimSurvNonp
surv = Surv(time = pmax(0,pmin(deathTimes, censTimes)), event=(deathTimes < censTimes)+0)
	
surv = Surv(time = pmax(0,pmin(deathTimes, censTimes)), event=(deathTimes < censTimes)+0)
	
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
simSurvival <- SimSurvNonp(totalRisk+1, basehaz(coxRFXFit, centered=FALSE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/functions.R", echo=FALSE, encoding="ISO-8859-1")
plot(coxRFXFit)
?plot.coxph
plot(coxModel)
plot(survFit(coxRFXFit))
plot(survfit(coxRFXFit))
oo
hist(rowSums(mutationTable))
plot(table(rowSums(mutationTable)))
t <- table(rowSums(mutationTable))
u <- table(rowSums(dataList$Cytogenetics))
u
t <- table(rowSums(dataList$Genetics))
barplot(rbind(Genetics=t, Cytogenetics=u))
(rbind(Genetics=t, Cytogenetics=u)
)
barplot(rbind(Genetics=t, Cytogenetics=c(u,0)))
t <- table(rowSums(cbind(dataList$Genetics, dataList$Cytogenetics))
)
barplot(t)
pdf("nOnc.pdf",4,3,pointsize=8)
barplot(t)
dev.off()
ncol(cbind(dataList$Genetics, dataList$Cytogenetics))
choose(82,3)
data <- cbind(dataList$Genetics, dataList$Cytogenetics)
colSums(data, na.rm=TRUE)
data <- data[,colSums(data, na.rm=TRUE)>=10]
dim(data)
data <- data[,colSums(data, na.rm=TRUE)>=16]
dim(data)
interactions <- sapply(1:ncol(data), function(i) sapply(1:ncol(data), function(j) {f<- try(fisher.test(data[,i], data[,j]), silent=TRUE); if(class(f)=="try-error") 0 else ifelse(f$estimate>1, -log10(f$p.val),log10(f$p.val))} ))
odds <- sapply(1:ncol(data), function(i) sapply(1:ncol(data), function(j) {f<- try(fisher.test(data[,i] + .5, data[,j] +.5), silent=TRUE); if(class(f)=="try-error") f=NA else f$estimate} ))
diag(interactions) <- 0
diag(odds) <- 1
colnames(odds) <- rownames(odds) <- colnames(interactions) <- rownames(interactions) <- colnames(data)
odds[10^-abs(interactions) > 0.05] = 1
odds[odds<1e-3] = 1e-4
odds[odds>1e3] = 1e4
logodds=log10(odds)
pdf(paste(Sys.Date(),"-Interactions.pdf", sep=""), 4,4, pointsize = 8) ## HEATMAP OF ALL
par(bty="n", mgp = c(2,.5,0), mar=c(3,3,2,2)+.1, las=2, tcl=-.33)
ix = TRUE#colnames(interactions) %in% colnames(all_genotypes)
h = hclust(dist(interactions[ix,ix]))
o = h$order #c(h$order,(length(h$order) +1):ncol(interactions))
#image(x=1:ncol(interactions), y=1:nrow(interactions), interactions[o,o], col=brewer.pal(11,"BrBG"), breaks = c(-100, seq(-9,9,2),  100), xaxt="n", yaxt="n", xlab="",ylab="", xlim=c(0, ncol(interactions)+3), ylim=c(0, ncol(interactions)+3))
image(x=1:ncol(interactions), y=1:nrow(interactions), log10(odds[o,o]), col=brewer.pal(9,"BrBG"), breaks = c(-4:0-.Machine$double.eps,0:4), xaxt="n", yaxt="n", xlab="",ylab="", xlim=c(0, ncol(interactions)+3), ylim=c(0, ncol(interactions)+3))
mtext(side=1, at=1:ncol(interactions), colnames(interactions)[o], cex=.5, font=3)
mtext(side=2, at=1:ncol(interactions), colnames(interactions)[o], cex=.5, font=3)
abline(h = length(h$order)+.5, col="white", lwd=1)
abline(v = length(h$order)+.5, col="white", lwd=1)
abline(h=0:ncol(interactions)+.5, col="white", lwd=.5)
abline(v=0:ncol(interactions)+.5, col="white", lwd=.5)
w = arrayInd(which(p.adjust(10^-abs(interactions[o,o]), method="BH") < .1), rep(nrow(interactions),2))
points(w, pch=".", col="white")
w = arrayInd(which(p.adjust(10^-abs(interactions[o,o])) < .05), rep(nrow(interactions),2))
points(w, pch="*", col="white")
image(y = 1:8, x=rep(ncol(interactions),2)+c(2,3), z=matrix(c(1:8), nrow=1), col=brewer.pal(8,"BrBG"), add=TRUE)
#axis(side = 4, at = 8:12 + .5, cex.axis=.5, tcl=-.15, label=10^-abs(seq(1,9,2)), las=1, lwd=.5)
#axis(side = 4, at = 1:5 + .5, cex.axis=.5, tcl=-.15, label=10^-abs(seq(-9,-1,2)), las=1, lwd=.5)
axis(side = 4, at = seq(1,7) + .5, cex.axis=.5, tcl=-.15, label=10^seq(-3,3), las=1, lwd=.5)
#lines(rep(ncol(interactions),2)+c(1,4), c(6,6)+.5, col="white")
#mtext(side=4, at=-1,  "P odds < 1", cex=.5, line=-.5)
#mtext(side=4, at=15,  "P odds > 1", cex=.5, line=-.5)
points(x=rep(ncol(interactions),2)+2.5, y=10:11, pch=c("*","."))
image(x=rep(ncol(interactions),2)+c(2,3), y=(12:13) -0.5, z=matrix(1), col=brewer.pal(3,"BrBG"), add=TRUE)
mtext(side=4, at=12:10, c("P > 0.05", "BH < 0.1", "Bf. < 0.05"), cex=.5, line=0.2)
dev.off()
sum(unique(data))
sum(unique(data, na.rm=TRUE))
length(unique(data))
dim(data)
unique(data)
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=brewer.pal(11,"RdBu"))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=brewer.pal(11,"Spectral"))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")))
pdf("nOncSurv.pdf",4,3, pointsize=8)
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")))
dev.off()
pdf("nOncSurv.pdf",3,2.5 pointsize=8)
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")))
dev.off()
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")))
dev.off()
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")))
dev.off()
pdf("allKM.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
for(j in colnames(data))
plot(survfit(survival ~ data[[j]], col=c("grey", set1[1]), main=j)

)
pdf("allKM.pdf",3,2.5, pointsize=8)
dev.off()
pdf("allKM.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
for(j in colnames(data)){
plot(survfit(survival ~ data[[j]]), col=c("grey", set1[1]), main=j)
}
dev.off()
pdf("allKM.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,1,0), mgp=c(2.5,0.5,0), bty="n")
for(j in colnames(data)){
plot(survfit(survival ~ data[[j]]), col=c("grey", set1[1]), main=j, xlab="days", ylab="efs")
}
dev.off()
pdf("allKM.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,1,0), mgp=c(2,0.5,0), bty="n")
for(j in colnames(data)){
plot(survfit(survival ~ data[[j]]), col=c("grey", set1[1]), main=j, xlab="days", ylab="efs")
}
dev.off()
partRiskVar <- PartialRiskVar(coxRFXFitTD)
x=c(varianceComponents, Residual=mean(rowSums(partRiskVar)))
pie(x, col=c(col1, "grey"), labels = paste(names(x), round(x/sum(x),2)))
plot(stabCoxInt)
which(stabCoxInt$Pi>.8)
t <- table(rowSums(cbind(dataList$Genetics, dataList$Cytogenetics)))

pdf("nOnc.pdf",4,3,pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
barplot(t,col=rev(brewer.pal(11,"Spectral")), xlab="Oncogenic mutations", ylab="# Cases")
dev.off()

pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")), xlab="Days", ylab="EFS")
legend("topright", 1:11, lty=1, bty="n",  col=rev(brewer.pal(11,"Spectral")))
dev.off()

pdf("allKM.pdf",3,2.5, pointsize=8)
dev.off()
pdf("allKM.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
for(j in colnames(data)){
	plot(survfit(survival ~ data[[j]]), col=c("grey", set1[1]), main=j, xlab="Days", ylab="EFS")
}
dev.off()
pdf("nOnc.pdf",4,3,pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
barplot(t,col=rev(brewer.pal(11,"Spectral")), xlab="Oncogenic mutations", ylab="# Cases")
dev.off()

pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")), xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=rev(brewer.pal(11,"Spectral")))
dev.off()

pdf("allKM.pdf",3,2.5, pointsize=8)
dev.off()
pdf("allKM.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2.5,0.5,0), bty="n")
for(j in colnames(data)){
	plot(survfit(survival ~ data[[j]]), col=c("grey", set1[1]), main=j, xlab="Days", ylab="EFS")
}
dev.off()
pdf("nOnc.pdf",4,3,pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2,0.5,0), bty="n")
barplot(t,col=rev(brewer.pal(11,"Spectral")), xlab="Oncogenic mutations", ylab="# Cases")
dev.off()

pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")), xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=rev(brewer.pal(11,"Spectral")))
dev.off()

pdf("allKM.pdf",3,2.5, pointsize=8)
dev.off()
pdf("allKM.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2,0.5,0), bty="n")
for(j in colnames(data)){
	plot(survfit(survival ~ data[[j]]), col=c("grey", set1[1]), main=j, xlab="Days", ylab="EFS")
}
dev.off()
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")), xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=rev(brewer.pal(11,"Spectral")), cex.=0.8)
dev.off()
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0), mgp=c(2,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")), xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=rev(brewer.pal(11,"Spectral")), cex=0.8)
dev.off()
pdf("nOnc.pdf",4,3,pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
barplot(t,col=rev(brewer.pal(11,"Spectral")), xlab="Oncogenic mutations", ylab="# Cases")
dev.off()

pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")), xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=rev(brewer.pal(11,"Spectral")), cex=0.8)
dev.off()

pdf("allKM.pdf",3,2.5, pointsize=8)
dev.off()
pdf("allKM.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
for(j in colnames(data)){
	plot(survfit(survival ~ data[[j]]), col=c("grey", set1[1]), main=j, xlab="Days", ylab="EFS")
}
dev.off()
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=rev(brewer.pal(11,"Spectral")), xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=rev(brewer.pal(11,"Spectral")), cex=0.8, title="Oncogenic mut")
dev.off()
2^50
2^20
t
t/ sum(t)
data <- cbind(dataList$Genetics, dataList$Cytogenetics)
class(data)
length(unique(data))
dim(data)
tmp <- apply(data, 1, function(x) paste(colnames(data)[x==1], collapse='.'))
length(tmp)
length(unique(tmp))
sort(table(tmp))
dim(data)
38 / 576
38 / 1576
colnames(data)
tmp <- apply(data, 1, function(x) paste(colnames(data)[which(x==1)], collapse='.'))
sort(table(tmp))
length(unique(tmp))
sum(table(tmp) > 10)
t <- table(tmp)
sum(t[t>10])
sum(t>10)
par(mar=c(5,7,1,1))
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
par(mfrow=c(1,1))
par(mar=c(5,7,1,1))
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
summary(coxRFXFitTD)
coxRFXFitTD$mu^2 / diag(coxRFXFitTD$mu.var)
pchisq(coxRFXFitTD$mu^2 / diag(coxRFXFitTD$mu.var), 1)
pchisq(coxRFXFitTD$mu^2 / diag(coxRFXFitTD$mu.var), 1, lower.tail=FALSE)
coxRFXFitTDMain <- CoxRFX(dataFrameTD[mainIdx], survivalTD, groups=as.character(groups[mainIdx]), nu = 0)
survConcordance(survivalTD~predict(coxRFXFitTDMain))
survConcordance(na.omit(survivalTD)~predict(coxRFXFitTDMain))
par(mar=c(5,7,1,1))
o <- order(coxRFXFitTDMain$mu)
boxplot(coef(coxRFXFitTDMain)/log(2) ~ factor(coxRFXFitTDMain$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
length(mainIdx)
which(mainIdx)
colnames(dataFrameTD)[1:110]
mainGroups <- c("Genetics","Treatment","Clinical","Cytogenetics")
mainIdx <- groups %in% mainGroups
which(mainIdx)
groups[1:100]
colnames(dataFrame)[1:110]
t <- clinicalData$Time_Diag_TPL
t[is.na(t)] <- Inf
e <- clinicalData$efs
#tplIndex <-  t < e
survivalTD <-  Surv(time = rep(0, nrow(clinicalData)), time2=pmin(e, t), event=ifelse(tplIndex, 0, clinicalData$EFSSTAT) )
survivalTD <- rbind(survivalTD, 
		Surv(time=t[which(tplIndex)],
				time2=e[which(tplIndex)], 
				event=clinicalData$EFSSTAT[which(tplIndex)])
)
survivalTD = Surv(survivalTD[,1],survivalTD[,2],survivalTD[,3])
rm(e,t)
tplSplit <- c(1:nrow(clinicalData), which(tplIndex))

#' Data frame
dataFrameTD <- dataFrame[tplSplit,]
dataFrameTD[which(tplIndex), grep("TPL", colnames(dataFrameTD), value=TRUE)] <- 0 ## Set pre-tpl variables to zero 

patientTD <- c(clinicalData$PDID, clinicalData$PDID[which(tplIndex)])

#' Fit TD Cox RFX model
#+ coxRFXFitTD, cache=TRUE
#whichRFXTD <- which(p.adjust(univP,"BH") < 0.1 | groups %in% c("Genetics","Treatment","Clinical","Cytogenetics"))
whichRFXTD <- which(colSums(dataFrame)>=8 | mainIdx)

coxRFXFitTD <- CoxRFX(dataFrameTD[,whichRFXTD], survivalTD, groups[whichRFXTD], sigma0=0.1, nu=0)
par(mar=c(5,7,1,1))
o <- order(coxRFXFitTD$mu)
boxplot(coef(coxRFXFitTD)/log(2) ~ factor(coxRFXFitTD$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
pchisq(coxRFXFitTD$mu^2 / diag(coxRFXFitTD$mu.var), 1, lower.tail=FALSE)
pchisq(coxRFXFitTD$mu^2 / diag(coxRFXFitTD$mu.var2), 1, lower.tail=FALSE)
coxRFXFitTDMain <- CoxRFX(dataFrameTD[mainIdx], survivalTD, groups=as.character(groups[mainIdx]), nu = 0)
par(mar=c(5,7,1,1))
o <- order(coxRFXFitTDMain$mu)
boxplot(coef(coxRFXFitTDMain)/log(2) ~ factor(coxRFXFitTDMain$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
par(mar=c(5,7,1,1))
o <- order(coxRFXFitTDMain$mu)
boxplot(coef(coxRFXFitTDMain)/log(2) ~ factor(coxRFXFitTDMain$groups, levels=levels(coxRFXFitTDMain$groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
pchisq(coxRFXFitTDMain$mu^2 / diag(coxRFXFitTDMain$mu.var), 1, lower.tail=FALSE)
survConcordance(na.omit(survivalTD)~predict(coxRFXFitTDMain))
CoxRFX(dataFrameTD[mainIdx], survivalTD, groups=as.character(groups[mainIdx]), nu = 0)
tmp <- CoxRFX(dataFrameTD[mainIdx], survivalTD, groups=as.character(groups[mainIdx]), nu = 0, which.mu = c(2,3,4))
tmp$mu
tmp$loglik
coxRFXFitTDMain$loglik
tmp$loglik
pchisq(2*(tmp$loglik[2]-coxRFXFitTDMain$loglik[2]), 1, lower.tail=FALSE)
tmp <- CoxRFX(dataFrameTD[mainIdx], survivalTD, groups=as.character(groups[mainIdx]), nu = 0, which.mu = NULL)
pchisq(2*(tmp$loglik[2]-coxRFXFitTDMain$loglik[2]), 1, lower.tail=FALSE)
tmp$loglik
tmp$mu
boxplot(tmp$coefficients ~ tmp$groups)
abline(0,1)
boxplot(tmp$coefficients ~ tmp$groups)
abline(h=0)
par(mar=c(5,7,1,1))
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit)/log(2) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
par(mar=c(5,7,1,1))
o <- order(coxRFXFit$mu)
boxplot(exp(coef(coxRFXFit)) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, log="x")
abline(v=0)
o <- order(coxRFXFit$mu)
boxplot(exp(coef(coxRFXFit)) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, log="x")
abline(v=1)
exp(coxRFXFitTD$mu)
1000 * 1/1.1^10
750 * 1/1.1^10
survfit(survival ~ rowSums(data, na.rm=TRUE))
637 * 1/1.1^10
basehaz(coxph(survival ~1))
plot(basehaz(coxph(survival ~1)))
?basehaz
 1/1.1^10
plot(basehaz(coxph(survival ~ rowSums(data, na.rm=TRUE))))
plot(basehaz(coxph(survival ~ rowSums(data, na.rm=TRUE)), centered=FALSE))
plot(basehaz(coxph(survival ~ rowSums(data, na.rm=TRUE))))
plot(basehaz(coxph(survival ~1)))
H0 <- basehaz(coxph(survival ~1)))
H0 <- basehaz(coxph(survival ~1))
	hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
n <- 10000
mean(hazardDist(rexp(n, 1))) 
median(hazardDist(rexp(n, 1))) 
median(hazardDist(rexp(n, 0.38))) 
median(hazardDist(rexp(n, 1.1^10))) 
sapply(seq(-2,2,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) )
plot(sapply(seq(-2,2,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) ))
plot(sapply(seq(-1,1,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) ))
plot(seq(-1,1,0.1), sapply(seq(-1,1,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) ))
o <- order(coxRFXFit$mu)
boxplot(exp(coef(coxRFXFit)) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, log="x")
abline(v=1)
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=1)
lines(sapply(seq(-2,2,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) )/1000)
plot(sapply(seq(-2,2,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) )/1000)
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=1)
lines(seq(-1,1,0.1), sapply(seq(-1,1,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) )/100)
par(mar=c(5,7,1,1))
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
pdf("coefHaz.pdf",3,3, pointsize=8)
par(mar=c(5,7,1,1))
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0)
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/100)
dev.off()
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, xlab="risk")
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/100)
dev.off()
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, xlab="risk")
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500)
dev.off()
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, xlab="risk")
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+1)
dev.off()
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, xlab="risk")
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/100+0.1)
dev.off()
sapply(seq(-1,1,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) )
sapply(seq(-1,1,0.1), function(x) median(hazardDist(rexp(n, exp(x)))) ) / 100
H0 <- basehaz(coxRFXFitTD)
	hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, xlab="risk")
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/100+0.1)
dev.off()
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=16, cex=.66, staplewex=0, xlab="risk")
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/1000+0.1)
dev.off()
H0
plot(H0)
H0 <- basehaz(coxRFXFitTD, centered = TRUE)
plot(H0)
H0 <- basehaz(coxRFXFitTD, centered = FALSE)
plot(H0)
H0 <- basehaz(coxph(survival ~ rowSums(data, na.rm=TRUE)), centered = FALSE)
plot(H0)
H0 <- basehaz(coxph(survival ~ rowSums(data, na.rm=TRUE)), centered = TRUE)
H0 <- basehaz(coxph(survival ~ 1), centered = TRUE)
	hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", xlim=c(-1,1))
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/1000+0.1)
dev.off()
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/1000+0.1)
dev.off()
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.1)
dev.off()
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
lines(seq(-1,1,0.05)+0.3, sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.1)
dev.off()
pdf("pie.pdf", 3,3, pointsize=8)
partRiskVar <- PartialRiskVar(coxRFXFitTD)
x=c(varianceComponents, Residual=mean(rowSums(partRiskVar)))
pie(x, col=c(col1, "grey"), labels = paste(names(x), round(x/sum(x),2)))
dev.off()
table(data$TP53, rowSums(data))
t <- table(data$TP53, rowSums(data))
t[2,]/colSums(t)
coxph(survfit(survival ~ rowSums(data) + data$TP53))
coxph(survival ~ rowSums(data) + data$TP53))
coxph(survival ~ rowSums(data) + data$TP53)
survConcordance(survival ~ rowSums(data))
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
spec <- rainbow(11, 0.8,1) #rev(brewer.pal(11,"Spectral"))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=spec, xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=spec, cex=0.8, title="Oncogenic mut")
dev.off()
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
spec <- rainbow(11, 1, 0.8) #rev(brewer.pal(11,"Spectral"))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=spec, xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=spec, cex=0.8, title="Oncogenic mut")
dev.off()
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
spec <- rainbow(11, 1, 0.75) #rev(brewer.pal(11,"Spectral"))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=spec, xlab="Days", ylab="EFS")
legend("topright", legend=1:11, lty=1, bty="n",  col=spec, cex=0.8, title="Oncogenic mut")
dev.off()
table(rowSums(data))
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
spec <- rainbow(11, 1, 0.75) #rev(brewer.pal(11,"Spectral"))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=spec, xlab="Days", ylab="EFS")
legend("topright", legend=0:10, lty=1, bty="n",  col=spec, cex=0.8, title="Oncogenic mut")
dev.off()
survConcordance(survival ~ rowSums(dataList$Cytogenetics, na.rm=TRUE))
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
spec <- rainbow(11, 1, 0.75) #rev(brewer.pal(11,"Spectral"))
plot(survfit(survival ~ rowSums(dataList$Cytogenetics, na.rm=TRUE)), col=spec, xlab="Days", ylab="EFS")
legend("topright", legend=0:10, lty=1, bty="n",  col=spec, cex=0.8, title="Oncogenic mut")
dev.off()
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
spec <- rainbow(11, 1, 0.75) #rev(brewer.pal(11,"Spectral"))
plot(survfit(survival ~ rowSums(dataList$Genetics, na.rm=TRUE)), col=spec, xlab="Days", ylab="EFS")
legend("topright", legend=0:10, lty=1, bty="n",  col=spec, cex=0.8, title="Oncogenic mut")
dev.off()
survConcordance(survival ~ rowSums(dataList$Genetics, na.rm=TRUE))
coxph(survival ~ rowSums(dataList$Genetics, na.rm=TRUE))
coxph(survival ~ rowSums(data, na.rm=TRUE))
survConcordance(survival ~ rowSums(dataList$Cytogenetics, na.rm=TRUE))
pdf("nOncSurv.pdf",3,2.5, pointsize=8)
par(mar=c(3,3,0,0)+.1, mgp=c(2,0.5,0), bty="n")
spec <- rainbow(11, 1, 0.75) #rev(brewer.pal(11,"Spectral"))
plot(survfit(survival ~ rowSums(data, na.rm=TRUE)), col=spec, xlab="Days", ylab="EFS")
legend("topright", legend=0:10, lty=1, bty="n",  col=spec, cex=0.8, title="Oncogenic mut")
dev.off()
H0 <- basehaz(coxph(survival ~ totalRiskTD), centered = FALSE)
H0 <- basehaz(coxph(survival ~ totalRisk), centered = FALSE)
plot(H0)
simStabCoxInt
which(simStabCoxInt$Pi > 0.8)
which(stabCoxInt$Pi > 0.8)
simSurvival <- SimSurvNonp(totalRisk+1, basehaz(coxph(survival ~ totalRisk)), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
survConcordance(simSurvival[trainIdx] ~ totalRisk[trainIdx])
survConcordance(simSurvival[trainIdx][-na.action(coxFit)] ~ predict(coxFit))
simSurvival <- SimSurvNonp(totalRisk+1, basehaz(coxph(survival ~ totalRisk), centered=FALSE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
simSurvival <- SimSurvNonp(totalRisk+1, basehaz(coxph(survival ~ totalRisk), centered=TRUE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxRFXFit, centered=FALSE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxRFXFit, centered=TRUE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxph(survival ~ totalRisk), centered=TRUE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
simSurvival <- SimSurvNonp(totalRisk, basehaz(coxph(survival ~ totalRisk), centered=FALSE), survival, span=.1)
plot(survfit(simSurvival ~ 1))
lines(survfit(survival ~ 1), col="red")
selectedInt <- names(which(stabCoxInt$Pi > 0.8))
survConcordance(survival[!trainIdx] ~ predict(coxph(survival[trainIdx] ~ ., data=dataFrame[trainIdx, selectedInt]), newdata = dataFrame[!trainIdx, selectedInt]))
selectedInt
coxph(survival[trainIdx] ~ ., data=dataFrame[trainIdx, selectedInt])
head(dataFrame[selectedInt])
names(dataFrame[selectedInt])
names(dataFrame)
selectedInt %in% names(dataFrame)
selectedInt
selectedInt[21] <- "TPL:NPM1"
survConcordance(survival[!trainIdx] ~ predict(coxph(survival[trainIdx] ~ ., data=dataFrame[trainIdx, selectedInt]), newdata = dataFrame[!trainIdx, selectedInt]))
load("../cv.RData")
cv <- as.data.frame(tmp)
tmp <- as.matrix(cv)
plot(rForest$importance, sum(varianceComponents) - colSums(tmp[-9,]), log="xy")
text(rForest$importance, sum(varianceComponents) - colSums(tmp[-9,]), colnames(tmp))
load("../cv.RData")
cv <- as.data.frame(tmp)
colnames(cv) <- grep(":", colnames(coxRFXFitTD$X), value=TRUE, invert=TRUE)
tmp <- as.matrix(cv)

plot(rForest$importance, sum(varianceComponents) - colSums(tmp[-9,]), log="xy")
text(rForest$importance, sum(varianceComponents) - colSums(tmp[-9,]), colnames(tmp))
cv <- as.data.frame(tmp)
colnames(cv) <- grep(":", colnames(coxRFXFitTD$X), value=TRUE, invert=TRUE)
tmp <- as.matrix(cv)
o <- order(colSums(cv[-9,]))
barplot(as.matrix(cv[,o]), col=c(col1,"grey"), las=2, border=NA, space=0)
plot(rForest$importance, sum(varianceComponents) - colSums(tmp[-9,]), log="xy")
coxph
coxRFXFit$loglik
survival:::fitter
survival::fitter
survival::coxph.fit
pdf("coefHaz.pdf",3,2.5, pointsize=8)
par(mar=c(3,7,1,1),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
H0 <- basehaz(coxph(survival~totalRisk), centered = FALSE)
hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.1)
dev.off()
pretty(0:5000)

pdf("coefHaz.pdf",3.2,2.5, pointsize=8)
par(mar=c(3,7,1,3),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
H0 <- basehaz(coxph(survival~totalRisk), centered = FALSE)
hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.1)
p <- pretty(0:5000)
axis(side=4, at = p/500+.1,labels=p)
dev.off()
pdf("coefHaz.pdf",3.2,2.5, pointsize=8)
par(mar=c(3,7,1,3),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
H0 <- basehaz(coxph(survival~totalRisk), centered = FALSE)
hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/750+0.5)
p <- pretty(0:5000)
axis(side=4, at = p/750+.5,labels=p)
dev.off()
pdf("coefHaz.pdf",3.2,2.5, pointsize=8)
par(mar=c(3,7,1,3),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
H0 <- basehaz(coxph(survival~totalRisk), centered = FALSE)
hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.5)
p <- pretty(0:2500)
axis(side=4, at = p/500+.5,labels=p)
dev.off()
pdf("coefHaz.pdf",3.2,2.5, pointsize=8)
par(mar=c(3,7,1,3.5),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
H0 <- basehaz(coxph(survival~totalRisk), centered = FALSE)
hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.5, las=2)
p <- pretty(0:2500)
axis(side=4, at = p/500+.5,labels=p)
dev.off()
pdf("coefHaz.pdf",3.2,2.5, pointsize=8)
par(mar=c(3,7,1,3.5),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
H0 <- basehaz(coxph(survival~totalRisk), centered = FALSE)
hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.5, las=1)
p <- pretty(0:2500)
axis(side=4, at = p/500+.5,labels=p)
dev.off()
pdf("coefHaz.pdf",3.2,2.5, pointsize=8)
par(mar=c(3,7,1,3.5),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
H0 <- basehaz(coxph(survival~totalRisk), centered = FALSE)
hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.5)
p <- pretty(0:2500)
axis(side=4, at = p/500+.5,labels=p ,las=1)
dev.off()
pdf("coefHaz.pdf",3.2,2.5, pointsize=8)
par(mar=c(3,6,1,3.5),mgp=c(2,0.5,0), bty="n")
o <- order(coxRFXFit$mu)
boxplot(coef(coxRFXFit) ~ factor(coxRFXFit$groups, levels=levels(groups)[o]), border=col1[o], horizontal=TRUE, las=1, lty=1, pch=NA, cex=.66, staplewex=0, xlab="risk", ylim=c(-1,1))
abline(v=0)
H0 <- basehaz(coxph(survival~totalRisk), centered = FALSE)
hazardDist <- splinefun(H0$hazard, H0$time, method="monoH.FC")
lines(seq(-1,1,0.05), sapply(seq(-1,1,0.05), function(x) median(hazardDist(rexp(n, exp(x)))) )/500+0.5)
p <- pretty(0:2500)
axis(side=4, at = p/500+.5,labels=p ,las=1)
dev.off()
dim(dataFrame)
dim(dataList$Cytogenetics)
dim(dataList$Clinical)
lapply(1:10, function(i){
			Z <- rmvnorm(nObs, mean=rep(0,nParam), sigma = diag(beta) + 1e-3)
			Z[] <- Z > quantile(Z, 0.75) ## Make binary
			risk = Z %*% a
			a <- a / sd(risk) # standardize
			mu <- mu / sd(risk) # standardize
			sd <- sd / sd(risk) # standardize
			risk <- risk / sd(risk)
			fit = CoxRFX(Z, surv, groups = groups, sigma0 = 0.1, nu=0)
			riskComponents <- sapply(levels(groups), function(g)  Z[,groups==g] %*% a[groups==g])
			varComp <- AnovaRFX(fit)
			rbind(varComp, c(diag(cov(riskComponents)), Residual=mean((predict(fit) - risk)^2)))
		})
plot(stabCoxInt)
survConcordance(na.omit(survival)~predict(tree))
r
selected
selectedInt
coxph(as.formula(paste("survival~", paste(selectedInt, collapse="+"))), data=dataFrame)
summary(coxph(as.formula(paste("survival~", paste(selectedInt, collapse="+"))), data=dataFrame))
.Last.value$concordance
survConcordance(na.omit(survival)~predict(tree))
survConcordance(na.omit(survival)~predict(predict(rForest, importance="none")$predicted)
survConcordance(na.omit(survival)~predict(rForest, importance="none")$predicted)
rForest
survConcordance(na.omit(survival[!trainIdx])~ p$predicted)
p <- predict(f, newdata = dataFrame[!trainIdx,mainIdx], importance="none")
rForestCV <- rfsrc(Surv(time, status) ~.,data= cbind(time = survival[,1], status = survival[,2], dataFrame[,mainIdx])[trainIdx,], ntree=100, importance="none")
p <- predict(rForestCV, newdata = dataFrame[!trainIdx,mainIdx], importance="none")
survConcordance(na.omit(survival[!trainIdx])~ p$predicted)
survConcordance(survival[!trainIdx]~ p$predicted)
survConcordance(survivalTD[!trainIdxTD]~totalRiskTest )
survConcordance(survival[!trainIdx] ~ predict(coxph(survival[trainIdx] ~ ., data=dataFrame[trainIdx, selectedInt]), newdata = dataFrame[!trainIdx, selectedInt]))
stabCoxIntCV <- CoxCPSSInteractions(dataFrame[!is.na(survival) & trainIdx,groups %in% mainGroups], na.omit(survival[trainIdx]), bootstrap.samples=50, scope = which(groups %in% c("Genetics","Cytogenetics","Treatment")))
selectedIntCV <- names(which(stabCoxInt$Pi > 0.8))
selectedIntCV <- names(which(stabCoxIntCV$Pi > 0.8))
survConcordance(survival[!trainIdx] ~ predict(coxph(survival[trainIdx] ~ ., data=dataFrame[trainIdx, selectedIntCV]), newdata = dataFrame[!trainIdx, selectedInt]))
survConcordance(survival[!trainIdx] ~ predict(coxph(survival[trainIdx] ~ ., data=dataFrame[trainIdx, selectedIntCV]), newdata = dataFrame[!trainIdx, selectedIntCV]))
load("/Volumes/mg14/AML/simResults.RData")

sim <-  array(simResults$pWald[order(simResults$indeces)], dim = (c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(interactionEffects), nSim)))
sim <- aperm(sim, 5:1)
#r <- array(unlist(simResults), dim = rev(c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(effectSizes), nSim)))
x <- colMeans(dataFrame[,groups=="Genetics"])
o <- order(x)
l <- (length(interactionEffects) +1)/2

plot(NA,NA, xlim=range(x), ylim=c(1e-40,1), log="y", xlab="Mutation frequency", ylab="P-value")
for(n in seq_along(nData))
	for(e in 1:l){
		lines(x=x[o],y=colMeans(sim[,2*e-1,,o,n], dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, type="b", pch=n)
	}
legend("bottomleft", legend=interactionEffects[seq(1,17,2)], col = brewer.pal(l,"Spectral"), lty=1, bty='n')
legend("bottom", pch=1:3, legend=nData, bty="n")
nData <- c(100, 1000, 10000)
treatmentEffects <- seq(0,-2,-0.25)
nSim <- 100
X <- expand.grid(nData=nData, gene=colnames(simDataFrame)[which(groups=="Genetics")], treatmentEffects=treatmentEffects, interactionEffects=interactionEffects, nSim=1:nSim)
load("../simulationData.RData")
X <- expand.grid(nData=nData, gene=colnames(simDataFrame)[which(groups=="Genetics")], treatmentEffects=treatmentEffects, interactionEffects=interactionEffects, nSim=1:nSim)
interactionEffects <- seq(-2,2,0.25)
X <- expand.grid(nData=nData, gene=colnames(simDataFrame)[which(groups=="Genetics")], treatmentEffects=treatmentEffects, interactionEffects=interactionEffects, nSim=1:nSim)
sim <-  array(simResults$pWald[order(simResults$indeces)], dim = (c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(interactionEffects), nSim)))
sim <- aperm(sim, 5:1)
#r <- array(unlist(simResults), dim = rev(c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(effectSizes), nSim)))
x <- colMeans(dataFrame[,groups=="Genetics"])
o <- order(x)
l <- (length(interactionEffects) +1)/2

plot(NA,NA, xlim=range(x), ylim=c(1e-40,1), log="y", xlab="Mutation frequency", ylab="P-value")
for(n in seq_along(nData))
	for(e in 1:l){
		lines(x=x[o],y=colMeans(sim[,2*e-1,,o,n], dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, type="b", pch=n)
	}
legend("bottomleft", legend=interactionEffects[seq(1,17,2)], col = brewer.pal(l,"Spectral"), lty=1, bty='n')
legend("bottom", pch=1:3, legend=nData, bty="n")
sim <-  array(simResults$pWald[order(simResults$indeces)], dim = (c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(interactionEffects), nSim)))
#r <- array(unlist(simResults), dim = rev(c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(effectSizes), nSim)))
x <- colMeans(dataFrame[,groups=="Genetics"])
o <- order(x)
l <- (length(interactionEffects) +1)/2

plot(NA,NA, xlim=range(x), ylim=c(1e-40,1), log="y", xlab="Mutation frequency", ylab="P-value")
for(n in seq_along(nData))
	for(e in 1:l){
		lines(x=x[o],y=colMeans(sim[,2*e-1,,o,n], dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, type="b", pch=n)
	}
legend("bottomleft", legend=interactionEffects[seq(1,17,2)], col = brewer.pal(l,"Spectral"), lty=1, bty='n')
legend("bottom", pch=1:3, legend=nData, bty="n")
sim <-  array(simResults$pWald[order(simResults$indeces)], dim = (c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(interactionEffects), nSim)))
sim <- aperm(sim, 5:1)
#r <- array(unlist(simResults), dim = rev(c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(effectSizes), nSim)))
x <- colMeans(dataFrame[,groups=="Genetics"])
o <- order(x)
l <- (length(interactionEffects) +1)/2

plot(NA,NA, xlim=range(x), ylim=c(1e-40,1), log="y", xlab="Mutation frequency", ylab="P-value")
for(n in seq_along(nData))
	for(e in 1:l){
		lines(x=x[o],y=colMeans(sim[,2*e-1,,o,n], dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, type="b", pch=n)
	}
legend("bottomleft", legend=interactionEffects[seq(1,17,2)], col = brewer.pal(l,"Spectral"), lty=1, bty='n')
legend("bottom", pch=1:3, legend=nData, bty="n")
sim <-  array(simResults$pWald[order(simResults$indeces)], dim = (c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(interactionEffects), nSim)))
sim <- aperm(sim, 5:1)
#r <- array(unlist(simResults), dim = rev(c(length(nData), sum(groups=="Genetics"),length(treatmentEffects), length(effectSizes), nSim)))
x <- colMeans(simDataFrame[,groups=="Genetics"])
o <- order(x)
l <- (length(interactionEffects) +1)/2

plot(NA,NA, xlim=range(x), ylim=c(1e-40,1), log="y", xlab="Mutation frequency", ylab="P-value")
for(n in seq_along(nData))
	for(e in 1:l){
		lines(x=x[o],y=colMeans(sim[,2*e-1,,o,n], dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, type="b", pch=n)
	}
legend("bottomleft", legend=interactionEffects[seq(1,17,2)], col = brewer.pal(l,"Spectral"), lty=1, bty='n')
legend("bottom", pch=1:3, legend=nData, bty="n")
plot(NA,NA, xlim=range(x)+ 1e-3, ylim=c(0,1), xlab="Mutation frequency", ylab="Power", log="x")
for(n in seq_along(nData))
	for(e in 1:l){
		points(x[o],colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n)
		s <- smooth.spline(log(x[o]),colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), spar=.5)
		lines(exp(s$x),s$y, col=brewer.pal(11,"Spectral")[e], lty=4-n)
	}
legend("topleft", legend=interactionEffects[seq(1,length(interactionEffects),2)], col = brewer.pal(l,"Spectral"), lty=1, bty='n')
plot(NA,NA, xlim=c(1,2500), ylim=c(1e-21,1), log="xy", xlab="Mutation number x effect^2", ylab="P-value")
for(n in seq_along(nData))
	for(e in 1:l)
		points(x=x[o]*nData[n]*abs(interactionEffects[2*e-1])^2,y=(colMeans(sim[,2*e-1,,o,n], dims=2, na.rm=TRUE)), col=brewer.pal(9,"Spectral")[e], lty=4-n, pch=n)
xx <- x[o]*nData[n]*abs(interactionEffects[2*e-1])^2
lines(xx, 10^-(xx/100))


plot(NA,NA, xlim=range(x)+ 1e-3, ylim=c(0,1), xlab="Mutation frequency", ylab="Power", log="x")
for(n in seq_along(nData))
	for(e in 1:l){
		points(x[o],colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n)
		s <- smooth.spline(log(x[o]),colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), spar=.5)
		lines(exp(s$x),s$y, col=brewer.pal(11,"Spectral")[e], lty=4-n)
	}
legend("topleft", legend=interactionEffects[seq(1,length(interactionEffects),2)], col = brewer.pal(l,"Spectral"), lty=1, bty='n')
x[o]
plot(NA,NA, xlim=c(1,2500), ylim=c(0,1), xlab="Mutation number x effect^2", ylab="Power", log="x")
for(n in seq_along(nData)[3])
	for(e in 1:l){
		points(x[o] *nData[n]* abs(interactionEffects[2*e-1])^2,colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, pch=n)
		s <- smooth.spline(log(x[o]),colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), spar=.5)
		lines(exp(s$x)*nData[n]*abs(interactionEffects[2*e-1])^2,s$y, col=brewer.pal(11,"Spectral")[e], lty=4-n)
	}
legend("topleft", legend=interactionEffects[seq(1,length(interactionEffects),2)], col = brewer.pal(11,"Spectral"), lty=1, bty='n')
pdf()
plot(NA,NA, xlim=c(1,2500), ylim=c(0,1), xlab="Mutation number x effect^2", ylab="Power", log="x")
for(n in seq_along(nData)[3])
	for(e in 1:l){
		points(x[o] *nData[n]* abs(interactionEffects[2*e-1])^2,colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, pch=n)
		s <- smooth.spline(log(x[o]),colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), spar=.5)
		lines(exp(s$x)*nData[n]*abs(interactionEffects[2*e-1])^2,s$y, col=brewer.pal(11,"Spectral")[e], lty=4-n)
	}
legend("topleft", legend=interactionEffects[seq(1,length(interactionEffects),2)], col = brewer.pal(11,"Spectral"), lty=1, bty='n')
plot(NA,NA, xlim=c(1,2500), ylim=c(0,1), xlab="Mutation number x effect^2", ylab="Power", log="x")
for(n in seq_along(nData))
	for(e in 1:l){
		points(x[o] *nData[n]* abs(interactionEffects[2*e-1])^2,colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, pch=n)
		s <- smooth.spline(log(x[o]),colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), spar=.5)
		lines(exp(s$x)*nData[n]*abs(interactionEffects[2*e-1])^2,s$y, col=brewer.pal(11,"Spectral")[e], lty=4-n)
	}
legend("topleft", legend=interactionEffects[seq(1,length(interactionEffects),2)], col = brewer.pal(11,"Spectral"), lty=1, bty='n')
plot(NA,NA, xlim=c(1,2500), ylim=c(0,1), xlab="Mutation number x effect^2", ylab="Power", log="x")
for(n in seq_along(nData)[2:3])
	for(e in 1:l){
		points(x[o] *nData[n]* abs(interactionEffects[2*e-1])^2,colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, pch=n)
		s <- smooth.spline(log(x[o]),colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), spar=.5)
		lines(exp(s$x)*nData[n]*abs(interactionEffects[2*e-1])^2,s$y, col=brewer.pal(11,"Spectral")[e], lty=4-n)
	}
legend("topleft", legend=interactionEffects[seq(1,length(interactionEffects),2)], col = brewer.pal(11,"Spectral"), lty=1, bty='n')
dev.off()
pdf()
plot(NA,NA, xlim=c(1,2500), ylim=c(0,1), xlab="Mutation number x effect^2", ylab="Power", log="x")
for(n in seq_along(nData)[3])
	for(e in 1:l){
		points(x[o] *nData[n]* abs(interactionEffects[2*e-1])^2,colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), col=brewer.pal(l,"Spectral")[e], lty=4-n, pch=n)
		s <- smooth.spline(log(x[o]),colMeans(sim[,2*e-1,,o,n] < 5e-2 / (length(x)), dims=2, na.rm=TRUE), spar=.5)
		lines(exp(s$x)*nData[n]*abs(interactionEffects[2*e-1])^2,s$y, col=brewer.pal(11,"Spectral")[e], lty=4-n)
	}
legend("topleft", legend=interactionEffects[seq(1,length(interactionEffects),2)], col = brewer.pal(11,"Spectral"), lty=1, bty='n')
dev.off()
coxph(survival[trainIdx] ~ ., data=dataFrame[trainIdx, selectedIntCV])
c <- coxph(survival[trainIdx] ~ ., data=dataFrame[trainIdx, selectedIntCV])
selectedIntCV
c <- coxph(survival ~ ., data=dataFrame[selectedInt])
c$var
mean(predict(c, se.fit=TRUE)$se.fit^2)
p <- predict(c, se.fit=TRUE)$se.fit
p <- predict(c, se.fit=TRUE)
str(p)
plot(p)
plot(as.data.frame(p))
var(p$fit)
p$se.fit
plot(survival[,1], p$fit)
plot(na.omit(survival[,1]), p$fit)
residual(c)
residuals(c)
plot(residuals(c), p$se.fit)
quantile(p$se.fit)
var(p$fit)
mean(p$se.fit^2)
plot(predict(stabCoxInt), p$fit)
plot(predict(coxRFXFit), p$fit)
plot(predict(coxRFXFit)[!is.na(survival)], p$fit)
plot((as.matrix(dataFrame[whichRFX])%*% coef(coxRFXFit))[!is.na(survival)], p$fit)
whichRFX
dim(dataFrame)
length(whichRFX)
plot((coxRFXFit$X%*% coef(coxRFXFit))[!is.na(survival)], p$fit)
plot((coxRFXFit$X%*% coef(coxRFXFit)), p$fit)
length(v)
length(coxRFXFit$X%*% coef(coxRFXFit))
length(p$fit)
sum(is.na(survival))
length(coxRFXFiTD$X%*% coef(coxRFXFit))
length(coxRFXFitTD$X%*% coef(coxRFXFit))
dim(dataFrame)
dim(coxRFXFit$X)
dim(coxRFXFitTD$X)
sum(whichRFX)
length(whichRFX)
whichRFX <- which(colSums(dataFrame)>=8 | mainIdx) # ie, > 0.5%
length(whichRFX)
coxRFXFit <- CoxRFX(dataFrame[,whichRFX], survival, groups=groups[whichRFX], sigma0=0.1, nu=0)
plot((coxRFXFit$X%*% coef(coxRFXFit)), p$fit)
plot((coxRFXFit$X%*% coef(coxRFXFit))[!is.na(survival)], p$fit)
x <- (coxRFXFit$X%*% coef(coxRFXFit))[!is.na(survival)]
plot(x, p$fit)
segments(x, p$fit + p$se.fit, x, p$fit - p$se.fit)
abline(0,1)
a <- AnovaRFX(coxRFXFit)
head(a)
source("/Users/mg14/Git/Projects/CoxHD/CoxHD/R/ecoxph.R", echo=FALSE, encoding="ISO-8859-1")
a <- AnovaRFX(coxRFXFit)
a
pie(a)
